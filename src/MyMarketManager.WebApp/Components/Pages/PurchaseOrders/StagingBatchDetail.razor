@page "/purchase-orders/staging/{batchId:guid}"
@rendermode InteractiveServer
@using MyMarketManager.GraphQL.Client
@using ProcessingStatus = MyMarketManager.GraphQL.Client.ProcessingStatus
@inject IMyMarketManagerClient GraphQLClient
@inject NavigationManager Navigation
@inject ILogger<StagingBatchDetail> Logger

<PageTitle>Staging Batch Details</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h1>Staging Batch Details</h1>
        @if (stagingBatch != null)
        {
            <p class="text-muted mb-0">Batch ID: @stagingBatch.Id</p>
        }
    </div>
    <button class="btn btn-outline-secondary" @onclick="GoBack">
        <i class="bi bi-arrow-left me-2"></i>
        Back to Staging
    </button>
</div>

<ErrorAlert @bind-Message="errorMessage" />

<DataDisplay
    TItem="IGetStagingBatchById_StagingBatchById"
    Loading="loading"
    Item="stagingBatch"
    NoItemsTitle="Batch Not Found"
    NoItemsMessage="@($"The staging batch with ID {BatchId} was not found.")">

    <NoItemsAction>
        <button class="btn btn-outline-warning" @onclick="GoBack">
            <i class="bi bi-arrow-left me-2"></i>
            Back to Staging
        </button>
    </NoItemsAction>

    <Content Context="batch">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-4">Batch Type:</dt>
                            <dd class="col-sm-8">
                                <span class="badge bg-info">
                                    @batch.BatchType
                                </span>
                            </dd>

                            <dt class="col-sm-4">Processor:</dt>
                            <dd class="col-sm-8">@(batch.BatchProcessorName ?? "-")</dd>

                            <dt class="col-sm-4">Supplier:</dt>
                            <dd class="col-sm-8">@(batch.SupplierName ?? "-")</dd>

                            <dt class="col-sm-4">Status:</dt>
                            <dd class="col-sm-8">
                                <span class="badge @GetStatusBadgeClass(batch.Status)">
                                    @batch.Status
                                </span>
                            </dd>
                        </dl>
                    </div>
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-4">Started:</dt>
                            <dd class="col-sm-8">@batch.StartedAt.ToString("yyyy-MM-dd HH:mm:ss")</dd>

                            <dt class="col-sm-4">Completed:</dt>
                            <dd class="col-sm-8">
                                @if (batch.CompletedAt.HasValue)
                                {
                                    @batch.CompletedAt.Value.ToString("yyyy-MM-dd HH:mm:ss")
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </dd>

                            <dt class="col-sm-4">Orders:</dt>
                            <dd class="col-sm-8">@batch.StagingPurchaseOrders.Count</dd>

                            <dt class="col-sm-4">Total Items:</dt>
                            <dd class="col-sm-8">@batch.StagingPurchaseOrders.Sum(o => o.ItemCount)</dd>
                        </dl>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(batch.Notes))
                {
                    <div class="mt-3">
                        <strong>Notes:</strong>
                        <p class="mt-1">@batch.Notes</p>
                    </div>
                }

                <ErrorAlert Message="@batch.ErrorMessage" Dismissible="false" CssClass="mt-3" />
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Purchase Orders (@batch.StagingPurchaseOrders.Count)</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Supplier Reference</th>
                                <th>Order Date</th>
                                <th>Status</th>
                                <th>Imported</th>
                                <th class="text-end">Items</th>
                                <th>Error</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in batch.StagingPurchaseOrders.OrderBy(o => o.OrderDate))
                            {
                                <tr>
                                    <td>
                                        @if (!string.IsNullOrEmpty(order.SupplierReference))
                                        {
                                            <code>@order.SupplierReference</code>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>@order.OrderDate.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(order.Status)">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td>
                                        @if (order.IsImported)
                                        {
                                            <span class="text-success">
                                                <i class="bi bi-check-circle me-1"></i>
                                                Imported
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">
                                                <i class="bi bi-circle me-1"></i>
                                                Pending
                                            </span>
                                        }
                                    </td>
                                    <td class="text-end">
                                        <span class="badge bg-secondary">@order.ItemCount</span>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(order.ErrorMessage))
                                        {
                                            <span class="text-danger" title="@order.ErrorMessage">
                                                <i class="bi bi-exclamation-triangle me-1"></i>
                                                Error
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-success">
                                                <i class="bi bi-check-circle"></i>
                                            </span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </Content>

</DataDisplay>

@code {
    [Parameter] public Guid BatchId { get; set; }

    private IGetStagingBatchById_StagingBatchById? stagingBatch;
    private bool loading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadStagingBatch();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (BatchId != Guid.Empty)
        {
            await LoadStagingBatch();
        }
    }

    private async Task LoadStagingBatch()
    {
        try
        {
            loading = true;
            errorMessage = null;
            stagingBatch = null;
            StateHasChanged();

            var result = await GraphQLClient.GetStagingBatchById.ExecuteAsync(BatchId);
            
            if (result.Data?.StagingBatchById != null)
            {
                stagingBatch = result.Data.StagingBatchById;
            }
            else if (result.Errors != null && result.Errors.Any())
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Message));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading staging batch {BatchId}", BatchId);
            errorMessage = $"Error loading staging batch: {ex.Message}";
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/purchase-orders/staging");
    }

    private string GetStatusBadgeClass(ProcessingStatus status)
    {
        return status switch
        {
            ProcessingStatus.Queued => "bg-secondary",
            ProcessingStatus.Started => "bg-primary",
            ProcessingStatus.Completed => "bg-success",
            ProcessingStatus.Failed => "bg-danger",
            ProcessingStatus.Cancelled => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }
}