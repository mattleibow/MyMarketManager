@page "/product-image-search"
@rendermode InteractiveServer
@using MyMarketManager.Data.Services
@using MyMarketManager.Data.Entities
@inject ImageVectorizationProcessor ImageProcessor
@inject ILogger<ProductImageSearch> Logger

<PageTitle>Product Image Search</PageTitle>

<h1>Product Image Search</h1>

<div class="row mb-4">
    <div class="col-md-12">
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link @(searchMode == SearchMode.Image ? "active" : "")" 
                        @onclick="() => searchMode = SearchMode.Image">
                    <i class="bi bi-image me-2"></i>Search by Image
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(searchMode == SearchMode.Text ? "active" : "")" 
                        @onclick="() => searchMode = SearchMode.Text">
                    <i class="bi bi-search me-2"></i>Search by Text
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(searchMode == SearchMode.Tags ? "active" : "")" 
                        @onclick="() => searchMode = SearchMode.Tags">
                    <i class="bi bi-tags me-2"></i>Search by Tags
                </button>
            </li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        @if (searchMode == SearchMode.Image)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Upload Image to Search</h5>
                    <p class="text-muted">Upload a product image to find visually similar products</p>
                    
                    <div class="mb-3">
                        <label for="imageUrl" class="form-label">Image URL</label>
                        <input type="text" class="form-control" id="imageUrl" @bind="imageSearchUrl" 
                               placeholder="Enter image URL or upload an image">
                    </div>
                    
                    <div class="mb-3">
                        <label for="similarityThreshold" class="form-label">Similarity Threshold: @similarityThreshold.ToString("F2")</label>
                        <input type="range" class="form-range" id="similarityThreshold" 
                               @bind="similarityThreshold" min="0.5" max="1.0" step="0.05">
                    </div>
                    
                    <button class="btn btn-primary" @onclick="SearchByImage" disabled="@(isSearching || string.IsNullOrEmpty(imageSearchUrl))">
                        @if (isSearching)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Searching...</span>
                        }
                        else
                        {
                            <i class="bi bi-search me-2"></i>
                            <span>Search</span>
                        }
                    </button>
                </div>
            </div>
        }
        else if (searchMode == SearchMode.Text)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Semantic Text Search</h5>
                    <p class="text-muted">Describe what you're looking for in natural language</p>
                    
                    <div class="mb-3">
                        <label for="searchText" class="form-label">Search Query</label>
                        <input type="text" class="form-control" id="searchText" @bind="textSearchQuery" 
                               placeholder="e.g., 'red dress with flowers'">
                    </div>
                    
                    <div class="mb-3">
                        <label for="textSimilarityThreshold" class="form-label">Similarity Threshold: @textSimilarityThreshold.ToString("F2")</label>
                        <input type="range" class="form-range" id="textSimilarityThreshold" 
                               @bind="textSimilarityThreshold" min="0.4" max="1.0" step="0.05">
                    </div>
                    
                    <button class="btn btn-primary" @onclick="SearchByText" disabled="@(isSearching || string.IsNullOrEmpty(textSearchQuery))">
                        @if (isSearching)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Searching...</span>
                        }
                        else
                        {
                            <i class="bi bi-search me-2"></i>
                            <span>Search</span>
                        }
                    </button>
                </div>
            </div>
        }
        else if (searchMode == SearchMode.Tags)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Filter by Tags</h5>
                    <p class="text-muted">Enter tags separated by commas to filter products</p>
                    
                    <div class="mb-3">
                        <label for="searchTags" class="form-label">Tags</label>
                        <input type="text" class="form-control" id="searchTags" @bind="tagSearchQuery" 
                               placeholder="e.g., 'dress, red, cotton'">
                        <div class="form-text">Separate tags with commas</div>
                    </div>
                    
                    <button class="btn btn-primary" @onclick="SearchByTags" disabled="@(isSearching || string.IsNullOrEmpty(tagSearchQuery))">
                        @if (isSearching)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Searching...</span>
                        }
                        else
                        {
                            <i class="bi bi-search me-2"></i>
                            <span>Search</span>
                        }
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@if (searchResults != null && searchResults.Any())
{
    <div class="row mt-4">
        <div class="col-md-12">
            <h3>Search Results (@searchResults.Count)</h3>
        </div>
    </div>
    
    <div class="row mt-3">
        @foreach (var result in searchResults)
        {
            <div class="col-md-3 mb-4">
                <div class="card h-100">
                    <img src="@result.ProductPhoto.Url" class="card-img-top" alt="@result.Product.Name" 
                         style="height: 200px; object-fit: cover;">
                    <div class="card-body">
                        <h5 class="card-title">@result.Product.Name</h5>
                        <p class="card-text text-muted">@result.ProductPhoto.AiDescription</p>
                        @if (!string.IsNullOrEmpty(result.ProductPhoto.AiTags))
                        {
                            <div class="mb-2">
                                @foreach (var tag in result.ProductPhoto.AiTags.Split(',').Take(5))
                                {
                                    <span class="badge bg-secondary me-1">@tag.Trim()</span>
                                }
                            </div>
                        }
                        <div class="progress mb-2" style="height: 20px;">
                            <div class="progress-bar" role="progressbar" 
                                 style="width: @((result.SimilarityScore * 100).ToString("F0"))%"
                                 aria-valuenow="@((result.SimilarityScore * 100).ToString("F0"))" 
                                 aria-valuemin="0" aria-valuemax="100">
                                @((result.SimilarityScore * 100).ToString("F0"))% match
                            </div>
                        </div>
                        <a href="/products" class="btn btn-sm btn-outline-primary">View Product</a>
                    </div>
                </div>
            </div>
        }
    </div>
}
else if (searchResults != null && !searchResults.Any())
{
    <div class="alert alert-info mt-3" role="alert">
        No matching products found. Try adjusting your search criteria or lowering the similarity threshold.
    </div>
}

@code {
    private enum SearchMode { Image, Text, Tags }
    
    private SearchMode searchMode = SearchMode.Text;
    private bool isSearching = false;
    private string? errorMessage;
    
    private string imageSearchUrl = "";
    private float similarityThreshold = 0.7f;
    
    private string textSearchQuery = "";
    private float textSimilarityThreshold = 0.6f;
    
    private string tagSearchQuery = "";
    
    private List<ProductImageSearchResult>? searchResults;

    private async Task SearchByImage()
    {
        isSearching = true;
        errorMessage = null;
        searchResults = null;
        StateHasChanged();

        try
        {
            searchResults = await ImageProcessor.SearchByImageAsync(
                imageSearchUrl, 
                maxResults: 20, 
                similarityThreshold: similarityThreshold);
            
            Logger.LogInformation("Image search completed. Found {Count} results", searchResults.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching by image");
            errorMessage = $"Error searching by image: {ex.Message}";
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private async Task SearchByText()
    {
        isSearching = true;
        errorMessage = null;
        searchResults = null;
        StateHasChanged();

        try
        {
            searchResults = await ImageProcessor.SearchByTextAsync(
                textSearchQuery, 
                maxResults: 20, 
                similarityThreshold: textSimilarityThreshold);
            
            Logger.LogInformation("Text search completed. Found {Count} results", searchResults.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching by text");
            errorMessage = $"Error searching by text: {ex.Message}";
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private async Task SearchByTags()
    {
        isSearching = true;
        errorMessage = null;
        searchResults = null;
        StateHasChanged();

        try
        {
            var tags = tagSearchQuery.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries).ToList();
            searchResults = await ImageProcessor.SearchByTagsAsync(tags);
            
            Logger.LogInformation("Tag search completed. Found {Count} results", searchResults.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching by tags");
            errorMessage = $"Error searching by tags: {ex.Message}";
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }
}
