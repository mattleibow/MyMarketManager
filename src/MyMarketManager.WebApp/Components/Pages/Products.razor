@page "/products"
@rendermode InteractiveServer
@using MyMarketManager.GraphQL.Client
@using ProductQuality = MyMarketManager.GraphQL.Client.ProductQuality
@inject IMyMarketManagerClient GraphQLClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="input-group" style="max-width: 400px;">
        <input type="text" class="form-control" placeholder="Search products..." @bind="searchTerm" @onkeyup="OnSearchKeyUp">
        <button class="btn btn-outline-secondary" type="button" @onclick="SearchProducts" title="Search">
            <i class="bi bi-search"></i>
        </button>
    </div>
    <button class="btn btn-primary" @onclick="AddProduct">
        <i class="bi bi-plus-circle"></i> Add Product
    </button>
</div>

@if (loading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">
        <i class="bi bi-exclamation-triangle"></i> @errorMessage
    </div>
}
else if (!filteredProducts.Any())
{
    <div class="alert alert-info">
        No products found. <a href="#" @onclick="AddProduct" @onclick:preventDefault="true">Add your first product</a>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>SKU</th>
                    <th>Name</th>
                    <th>Quality</th>
                    <th>Stock</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in filteredProducts)
                {
                    <tr>
                        <td>
                            @if (!string.IsNullOrEmpty(product.Sku))
                            {
                                <code>@product.Sku</code>
                            }
                            else
                            {
                                <em class="text-muted">No SKU</em>
                            }
                        </td>
                        <td>
                            <strong>@product.Name</strong>
                            @if (!string.IsNullOrEmpty(product.Description))
                            {
                                <br>
                                <small class="text-muted">@product.Description</small>
                            }
                        </td>
                        <td>
                            <span class="badge @GetQualityBadgeClass(product.Quality)">
                                @product.Quality
                            </span>
                        </td>
                        <td>
                            <span class="badge @(product.StockOnHand > 0 ? "bg-success" : "bg-warning")">
                                @product.StockOnHand
                            </span>
                        </td>
                        <td>
                            <div class="btn-group" role="group" aria-label="Product actions">
                                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => EditProduct(product.Id)" title="Edit Product">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteProduct(product)" title="Delete Product">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (productToDelete != null)
{
    <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Product</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete <strong>@productToDelete.Name</strong>?</p>
                    @if (productToDelete.StockOnHand > 0)
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            This product has @productToDelete.StockOnHand units in stock.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteProduct" disabled="@deleting">
                        @if (deleting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-trash"></i>
                        }
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<IGetProducts_Products> products = new();
    private List<IGetProducts_Products> filteredProducts = new();
    private bool loading = true;
    private bool deleting = false;
    private string searchTerm = string.Empty;
    private IGetProducts_Products? productToDelete;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        loading = true;
        errorMessage = null;
        StateHasChanged();
        try
        {
            var result = await GraphQLClient.GetProducts.ExecuteAsync();
            
            if (result.Errors != null && result.Errors.Count > 0)
            {
                errorMessage = "Error loading products: " + string.Join(", ", result.Errors.Select(e => e.Message));
            }
            else if (result.Data?.Products != null)
            {
                products = result.Data.Products.ToList();
                ApplyFilter();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading products: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading products:", ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredProducts = products;
        }
        else
        {
            var search = searchTerm.ToLower();
            filteredProducts = products.Where(p =>
                p.Name.ToLower().Contains(search) ||
                (p.Description?.ToLower().Contains(search) ?? false) ||
                (p.Sku?.ToLower().Contains(search) ?? false)
            ).ToList();
        }
    }

    private async Task SearchProducts()
    {
        ApplyFilter();
        StateHasChanged();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchProducts();
        }
    }

    private void AddProduct()
    {
        Navigation.NavigateTo("/products/add");
    }

    private void EditProduct(Guid productId)
    {
        Navigation.NavigateTo($"/products/edit/{productId}");
    }

    private void ConfirmDeleteProduct(IGetProducts_Products product)
    {
        productToDelete = product;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        productToDelete = null;
        StateHasChanged();
    }

    private async Task DeleteProduct()
    {
        if (productToDelete != null)
        {
            deleting = true;
            errorMessage = null;
            StateHasChanged();
            
            try
            {
                var result = await GraphQLClient.DeleteProduct.ExecuteAsync(productToDelete.Id);
                
                if (result.Errors != null && result.Errors.Count > 0)
                {
                    errorMessage = "Error deleting product: " + string.Join(", ", result.Errors.Select(e => e.Message));
                    await JSRuntime.InvokeVoidAsync("alert", errorMessage);
                }
                else
                {
                    productToDelete = null;
                    await LoadProducts();
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting product: {ex.Message}";
                await JSRuntime.InvokeVoidAsync("console.error", "Error deleting product:", ex.Message);
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
            finally
            {
                deleting = false;
                StateHasChanged();
            }
        }
    }

    private string GetQualityBadgeClass(ProductQuality quality)
    {
        return quality switch
        {
            ProductQuality.Excellent => "bg-success",
            ProductQuality.Good => "bg-primary",
            ProductQuality.Fair => "bg-warning",
            ProductQuality.Poor => "bg-danger",
            ProductQuality.Terrible => "bg-dark",
            _ => "bg-secondary"
        };
    }
}
