@using MyMarketManager.GraphQL.Client
@inject IMyMarketManagerClient GraphQLClient
@inject ILogger<ProductSelectorModal> Logger

<div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select or Create Product</h5>
                <button type="button" class="btn-close" @onclick="Cancel"></button>
            </div>
            <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                
                <!-- Item Information -->
                <div class="alert alert-info">
                    <strong>Item:</strong> @Item.Name
                    @if (!string.IsNullOrEmpty(Item.Description))
                    {
                        <br>
                        <small>@Item.Description</small>
                    }
                </div>

                <ErrorAlert @bind-Message="errorMessage" />

                <!-- Create New Product Option -->
                <div class="card mb-3 border-primary">
                    <div class="card-body">
                        <h6 class="card-title">
                            <i class="bi bi-plus-circle text-primary me-2"></i>
                            Create New Product
                        </h6>
                        <p class="card-text mb-2">
                            Create a new product with information pre-populated from this staging item.
                        </p>
                        <button type="button" class="btn btn-primary" @onclick="CreateNewProduct">
                            <i class="bi bi-plus-circle me-2"></i>
                            Create New Product
                        </button>
                    </div>
                </div>

                <!-- Search Products -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="card-title mb-0">Search Existing Products</h6>
                    </div>
                    <div class="card-body">
                        <div class="input-group mb-3">
                            <input type="text" 
                                   class="form-control" 
                                   placeholder="Search by name, description, or SKU..." 
                                   @bind="searchTerm" 
                                   @onkeyup="OnSearchKeyUp">
                            <button class="btn btn-outline-secondary" 
                                    type="button" 
                                    @onclick="SearchProducts"
                                    disabled="@searching">
                                @if (searching)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                }
                                else
                                {
                                    <i class="bi bi-search"></i>
                                }
                            </button>
                        </div>

                        @if (suggestions.Any())
                        {
                            <div class="list-group">
                                @foreach (var product in suggestions)
                                {
                                    <button type="button" 
                                            class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                                            @onclick="() => SelectProduct(product.Id)">
                                        <div class="flex-grow-1">
                                            <div class="d-flex align-items-center mb-1">
                                                <span class="badge @GetQualityBadgeClass(product.Quality) me-2">
                                                    @product.Quality
                                                </span>
                                                <strong>@product.Name</strong>
                                            </div>
                                            @if (!string.IsNullOrEmpty(product.Description))
                                            {
                                                <div class="text-muted small mb-1">@product.Description</div>
                                            }
                                            <div class="d-flex gap-2 small">
                                                @if (!string.IsNullOrEmpty(product.Sku))
                                                {
                                                    <span><code>@product.Sku</code></span>
                                                }
                                                <span class="text-muted">Stock: @product.StockOnHand</span>
                                            </div>
                                        </div>
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                }
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(searchTerm) && !searching && hasSearched)
                        {
                            <div class="alert alert-warning mb-0">
                                <i class="bi bi-info-circle me-2"></i>
                                No products found matching "<strong>@searchTerm</strong>".
                            </div>
                        }
                        else if (!hasSearched)
                        {
                            <div class="text-muted text-center py-3">
                                <i class="bi bi-search me-2"></i>
                                Enter a search term to find existing products
                            </div>
                        }
                    </div>
                </div>

                <!-- Suggested Matches (based on item name) -->
                @if (suggestedMatches.Any())
                {
                    <div class="card mb-3 border-success">
                        <div class="card-header bg-success text-white">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-stars me-2"></i>
                                Suggested Matches
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="list-group">
                                @foreach (var product in suggestedMatches.Take(5))
                                {
                                    <button type="button" 
                                            class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                                            @onclick="() => SelectProduct(product.Id)">
                                        <div class="flex-grow-1">
                                            <div class="d-flex align-items-center mb-1">
                                                <span class="badge @GetQualityBadgeClass(product.Quality) me-2">
                                                    @product.Quality
                                                </span>
                                                <strong>@product.Name</strong>
                                            </div>
                                            @if (!string.IsNullOrEmpty(product.Description))
                                            {
                                                <div class="text-muted small mb-1">@product.Description</div>
                                            }
                                            <div class="d-flex gap-2 small">
                                                @if (!string.IsNullOrEmpty(product.Sku))
                                                {
                                                    <span><code>@product.Sku</code></span>
                                                }
                                                <span class="text-muted">Stock: @product.StockOnHand</span>
                                            </div>
                                        </div>
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Product Form Modal (stacked on top) -->
@if (showProductFormModal)
{
    <ProductFormModal 
        InitialName="@Item.Name"
        InitialDescription="@Item.Description"
        OnProductSaved="HandleProductCreated"
        OnCancel="CloseProductFormModal" />
}

@code {
    [Parameter, EditorRequired]
    public IGetStagingPurchaseOrderById_StagingPurchaseOrderById_Items Item { get; set; } = null!;

    [Parameter]
    public EventCallback<Guid> OnProductSelected { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private string searchTerm = string.Empty;
    private List<ISearchProductsForItem_SearchProductsForItem> suggestions = new();
    private List<ISearchProductsForItem_SearchProductsForItem> suggestedMatches = new();
    private bool searching = false;
    private bool hasSearched = false;
    private string? errorMessage;
    private bool showProductFormModal = false;

    protected override async Task OnInitializedAsync()
    {
        // Pre-populate search with item name
        searchTerm = Item.Name;
        
        // Load suggested matches automatically
        await LoadSuggestedMatches();
    }

    private async Task LoadSuggestedMatches()
    {
        try
        {
            var result = await GraphQLClient.SearchProductsForItem.ExecuteAsync(Item.Name);
            
            if (result.Data?.SearchProductsForItem != null)
            {
                suggestedMatches = result.Data.SearchProductsForItem.ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading suggested matches");
            // Don't show error for suggestions, just log it
        }
    }

    private async Task SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return;
        }

        try
        {
            searching = true;
            errorMessage = null;
            StateHasChanged();

            var result = await GraphQLClient.SearchProductsForItem.ExecuteAsync(searchTerm.Trim());
            
            if (result.Data?.SearchProductsForItem != null)
            {
                suggestions = result.Data.SearchProductsForItem.ToList();
                hasSearched = true;
            }
            else if (result.Errors != null && result.Errors.Any())
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Message));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching products");
            errorMessage = $"Error searching products: {ex.Message}";
        }
        finally
        {
            searching = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchProducts();
        }
    }

    private async Task SelectProduct(Guid productId)
    {
        await OnProductSelected.InvokeAsync(productId);
    }

    private void CreateNewProduct()
    {
        showProductFormModal = true;
        StateHasChanged();
    }

    private async Task HandleProductCreated(Guid productId)
    {
        showProductFormModal = false;
        // Automatically select the newly created product
        await OnProductSelected.InvokeAsync(productId);
    }

    private void CloseProductFormModal()
    {
        showProductFormModal = false;
        StateHasChanged();
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    private string GetQualityBadgeClass(ProductQuality quality)
    {
        return quality switch
        {
            ProductQuality.Excellent => "bg-success",
            ProductQuality.Good => "bg-primary",
            ProductQuality.Fair => "bg-warning",
            ProductQuality.Poor => "bg-danger",
            ProductQuality.Terrible => "bg-dark",
            _ => "bg-secondary"
        };
    }
}
