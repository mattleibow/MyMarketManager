@using MyMarketManager.Data
@using MyMarketManager.Data.Entities
@using MyMarketManager.Data.Services
@using Microsoft.EntityFrameworkCore
@inject MyMarketManagerDbContext DbContext
@inject ILogger<ProductImageUpload> Logger

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Product Images</h5>
        
        @if (Product != null)
        {
            @if (Product.Photos.Any())
            {
                <div class="row mb-3">
                    @foreach (var photo in Product.Photos)
                    {
                        <div class="col-md-3 mb-3">
                            <div class="card">
                                <img src="@photo.Url" class="card-img-top" alt="Product" style="height: 150px; object-fit: cover;">
                                <div class="card-body p-2">
                                    @if (!string.IsNullOrEmpty(photo.AiDescription))
                                    {
                                        <p class="card-text small text-muted mb-1">@photo.AiDescription</p>
                                    }
                                    @if (!string.IsNullOrEmpty(photo.AiTags))
                                    {
                                        <div class="mb-1">
                                            @foreach (var tag in photo.AiTags.Split(',').Take(3))
                                            {
                                                <span class="badge bg-secondary me-1" style="font-size: 0.7rem;">@tag.Trim()</span>
                                            }
                                        </div>
                                    }
                                    @if (photo.VectorizedAt.HasValue)
                                    {
                                        <small class="text-success"><i class="bi bi-check-circle me-1"></i>Analyzed</small>
                                    }
                                    else
                                    {
                                        <small class="text-warning"><i class="bi bi-clock me-1"></i>Pending</small>
                                    }
                                    <button class="btn btn-sm btn-outline-danger float-end" @onclick="() => DeleteImage(photo.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted">No images uploaded yet</p>
            }
            
            <hr />
            
            <div class="mb-3">
                <label for="imageUrl" class="form-label">Add Image URL</label>
                <div class="input-group">
                    <input type="text" class="form-control" id="imageUrl" 
                           @bind="newImageUrl" placeholder="Enter image URL">
                    <button class="btn btn-primary" @onclick="AddImageUrl" disabled="@(string.IsNullOrEmpty(newImageUrl) || isSaving)">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        <span>Add</span>
                    </button>
                </div>
                <div class="form-text">Image will be automatically analyzed and vectorized within 10 minutes</div>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public Product? Product { get; set; }
    
    [Parameter]
    public EventCallback OnImageChanged { get; set; }
    
    private string newImageUrl = "";
    private bool isSaving = false;
    private string? errorMessage;
    private string? successMessage;

    private async Task AddImageUrl()
    {
        if (Product == null || string.IsNullOrEmpty(newImageUrl))
            return;
            
        isSaving = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        try
        {
            // Validate URL format
            if (!Uri.TryCreate(newImageUrl, UriKind.Absolute, out var uri))
            {
                errorMessage = "Invalid URL format";
                return;
            }
            
            var photo = new ProductPhoto
            {
                Id = Guid.NewGuid(),
                ProductId = Product.Id,
                Url = newImageUrl,
                CreatedAt = DateTimeOffset.UtcNow,
                UpdatedAt = DateTimeOffset.UtcNow
            };
            
            DbContext.ProductPhotos.Add(photo);
            await DbContext.SaveChangesAsync();
            
            // Reload product photos
            await DbContext.Entry(Product).Collection(p => p.Photos).LoadAsync();
            
            successMessage = "Image added successfully! It will be analyzed automatically.";
            newImageUrl = "";
            
            Logger.LogInformation("Added image {PhotoId} for product {ProductId}", photo.Id, Product.Id);
            
            await OnImageChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding image");
            errorMessage = $"Error adding image: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteImage(Guid photoId)
    {
        if (Product == null)
            return;

        try
        {
            var photo = await DbContext.ProductPhotos.FindAsync(photoId);
            if (photo != null)
            {
                DbContext.ProductPhotos.Remove(photo);
                await DbContext.SaveChangesAsync();
                
                // Reload product photos
                await DbContext.Entry(Product).Collection(p => p.Photos).LoadAsync();
                
                successMessage = "Image deleted successfully";
                
                Logger.LogInformation("Deleted image {PhotoId}", photoId);
                
                await OnImageChanged.InvokeAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting image");
            errorMessage = $"Error deleting image: {ex.Message}";
            StateHasChanged();
        }
    }
}
