// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public static partial class MyMarketManagerClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::MyMarketManager.GraphQL.Client.State.MyMarketManagerClientStoreAccessor> AddMyMarketManagerClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly, global::MyMarketManager.GraphQL.Client.MyMarketManagerClientProfileKind profile = global::MyMarketManager.GraphQL.Client.MyMarketManagerClientProfileKind.Default)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                if (profile == global::MyMarketManager.GraphQL.Client.MyMarketManagerClientProfileKind.Default)
                {
                    ConfigureClientDefault(sp, serviceCollection, strategy);
                }
                else if (profile == global::MyMarketManager.GraphQL.Client.MyMarketManagerClientProfileKind.InMemory)
                {
                    ConfigureClientInMemory(sp, serviceCollection, strategy);
                }

                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::MyMarketManager.GraphQL.Client.State.MyMarketManagerClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.CreateProductMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.DeleteProductMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetProductByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetProductsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.UpdateProductMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetAvailableScrapersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetPurchaseOrderByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetPurchaseOrdersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.SubmitCookiesMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetStagingBatchByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetStagingBatchesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetSuppliersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.MyMarketManagerClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IMyMarketManagerClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::MyMarketManager.GraphQL.Client.State.MyMarketManagerClientStoreAccessor>("MyMarketManagerClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("MyMarketManagerClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyMarketManager.GraphQL.Client.ProductQualitySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyMarketManager.GraphQL.Client.StagingBatchTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyMarketManager.GraphQL.Client.ProcessingStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyMarketManager.GraphQL.Client.CreateProductInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyMarketManager.GraphQL.Client.UpdateProductInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ICreateProductResult>, global::MyMarketManager.GraphQL.Client.State.CreateProductResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ICreateProductResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.ICreateProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ICreateProductResult>, global::MyMarketManager.GraphQL.Client.State.CreateProductBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.ICreateProductResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ICreateProductResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ICreateProductResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.CreateProductMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.ICreateProductMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.CreateProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IDeleteProductResult>, global::MyMarketManager.GraphQL.Client.State.DeleteProductResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IDeleteProductResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IDeleteProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IDeleteProductResult>, global::MyMarketManager.GraphQL.Client.State.DeleteProductBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IDeleteProductResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IDeleteProductResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IDeleteProductResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.DeleteProductMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IDeleteProductMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.DeleteProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetProductByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetProductByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetProductByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetProductByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductsResult>, global::MyMarketManager.GraphQL.Client.State.GetProductsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetProductsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductsResult>, global::MyMarketManager.GraphQL.Client.State.GetProductsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetProductsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetProductsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetProductsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetProductsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IUpdateProductResult>, global::MyMarketManager.GraphQL.Client.State.UpdateProductResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IUpdateProductResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IUpdateProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IUpdateProductResult>, global::MyMarketManager.GraphQL.Client.State.UpdateProductBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IUpdateProductResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IUpdateProductResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IUpdateProductResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.UpdateProductMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IUpdateProductMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.UpdateProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>, global::MyMarketManager.GraphQL.Client.State.GetAvailableScrapersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>, global::MyMarketManager.GraphQL.Client.State.GetAvailableScrapersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetAvailableScrapersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetAvailableScrapersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetPurchaseOrderByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetPurchaseOrderByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetPurchaseOrderByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetPurchaseOrderByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>, global::MyMarketManager.GraphQL.Client.State.GetPurchaseOrdersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>, global::MyMarketManager.GraphQL.Client.State.GetPurchaseOrdersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetPurchaseOrdersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetPurchaseOrdersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>, global::MyMarketManager.GraphQL.Client.State.SubmitCookiesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>, global::MyMarketManager.GraphQL.Client.State.SubmitCookiesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.SubmitCookiesMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.SubmitCookiesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetStagingBatchByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetStagingBatchByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetStagingBatchByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetStagingBatchByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>, global::MyMarketManager.GraphQL.Client.State.GetStagingBatchesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>, global::MyMarketManager.GraphQL.Client.State.GetStagingBatchesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetStagingBatchesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetStagingBatchesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>, global::MyMarketManager.GraphQL.Client.State.GetSuppliersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>, global::MyMarketManager.GraphQL.Client.State.GetSuppliersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetSuppliersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetSuppliersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::MyMarketManager.GraphQL.Client.State.MyMarketManagerClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.MyMarketManagerClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IMyMarketManagerClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.MyMarketManagerClient>(sp));
            return services;
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientInMemory(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.InMemory.InMemoryConnection(async ct => await clientFactory.CreateAsync("MyMarketManagerClient", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyMarketManager.GraphQL.Client.ProductQualitySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyMarketManager.GraphQL.Client.StagingBatchTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyMarketManager.GraphQL.Client.ProcessingStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyMarketManager.GraphQL.Client.CreateProductInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyMarketManager.GraphQL.Client.UpdateProductInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ICreateProductResult>, global::MyMarketManager.GraphQL.Client.State.CreateProductResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ICreateProductResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.ICreateProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ICreateProductResult>, global::MyMarketManager.GraphQL.Client.State.CreateProductBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.ICreateProductResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ICreateProductResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ICreateProductResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.CreateProductMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.ICreateProductMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.CreateProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IDeleteProductResult>, global::MyMarketManager.GraphQL.Client.State.DeleteProductResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IDeleteProductResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IDeleteProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IDeleteProductResult>, global::MyMarketManager.GraphQL.Client.State.DeleteProductBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IDeleteProductResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IDeleteProductResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IDeleteProductResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.DeleteProductMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IDeleteProductMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.DeleteProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetProductByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetProductByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetProductByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetProductByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductsResult>, global::MyMarketManager.GraphQL.Client.State.GetProductsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetProductsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductsResult>, global::MyMarketManager.GraphQL.Client.State.GetProductsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetProductsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetProductsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetProductsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetProductsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetProductsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IUpdateProductResult>, global::MyMarketManager.GraphQL.Client.State.UpdateProductResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IUpdateProductResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IUpdateProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IUpdateProductResult>, global::MyMarketManager.GraphQL.Client.State.UpdateProductBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IUpdateProductResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IUpdateProductResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IUpdateProductResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.UpdateProductMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IUpdateProductMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.UpdateProductMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>, global::MyMarketManager.GraphQL.Client.State.GetAvailableScrapersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>, global::MyMarketManager.GraphQL.Client.State.GetAvailableScrapersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetAvailableScrapersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetAvailableScrapersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetPurchaseOrderByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetPurchaseOrderByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetPurchaseOrderByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetPurchaseOrderByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>, global::MyMarketManager.GraphQL.Client.State.GetPurchaseOrdersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>, global::MyMarketManager.GraphQL.Client.State.GetPurchaseOrdersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetPurchaseOrdersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetPurchaseOrdersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>, global::MyMarketManager.GraphQL.Client.State.SubmitCookiesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>, global::MyMarketManager.GraphQL.Client.State.SubmitCookiesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.SubmitCookiesMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.SubmitCookiesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetStagingBatchByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>, global::MyMarketManager.GraphQL.Client.State.GetStagingBatchByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetStagingBatchByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetStagingBatchByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>, global::MyMarketManager.GraphQL.Client.State.GetStagingBatchesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>, global::MyMarketManager.GraphQL.Client.State.GetStagingBatchesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetStagingBatchesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetStagingBatchesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>, global::MyMarketManager.GraphQL.Client.State.GetSuppliersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>, global::MyMarketManager.GraphQL.Client.State.GetSuppliersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.InMemory.IInMemoryConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.GetSuppliersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.GetSuppliersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::MyMarketManager.GraphQL.Client.State.MyMarketManagerClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.MyMarketManagerClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyMarketManager.GraphQL.Client.IMyMarketManagerClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyMarketManager.GraphQL.Client.MyMarketManagerClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace MyMarketManager.GraphQL.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateProductResult : global::System.IEquatable<CreateProductResult>, ICreateProductResult
    {
        public CreateProductResult(global::MyMarketManager.GraphQL.Client.ICreateProduct_CreateProduct createProduct)
        {
            CreateProduct = createProduct;
        }

        public global::MyMarketManager.GraphQL.Client.ICreateProduct_CreateProduct CreateProduct { get; }

        public virtual global::System.Boolean Equals(CreateProductResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CreateProduct.Equals(other.CreateProduct));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateProductResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CreateProduct.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateProduct_CreateProduct_Product : global::System.IEquatable<CreateProduct_CreateProduct_Product>, ICreateProduct_CreateProduct_Product
    {
        public CreateProduct_CreateProduct_Product(global::System.Guid id, global::System.String? sku, global::System.String name, global::System.String? description, global::MyMarketManager.GraphQL.Client.ProductQuality quality, global::System.String? notes, global::System.Int32 stockOnHand)
        {
            Id = id;
            Sku = sku;
            Name = name;
            Description = description;
            Quality = quality;
            Notes = notes;
            StockOnHand = stockOnHand;
        }

        public global::System.Guid Id { get; }
        public global::System.String? Sku { get; }
        public global::System.String Name { get; }
        public global::System.String? Description { get; }
        public global::MyMarketManager.GraphQL.Client.ProductQuality Quality { get; }
        public global::System.String? Notes { get; }
        public global::System.Int32 StockOnHand { get; }

        public virtual global::System.Boolean Equals(CreateProduct_CreateProduct_Product? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Sku is null && other.Sku is null) || Sku != null && Sku.Equals(other.Sku)) && Name.Equals(other.Name) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Quality.Equals(other.Quality) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes)) && global::System.Object.Equals(StockOnHand, other.StockOnHand);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateProduct_CreateProduct_Product)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Sku != null)
                {
                    hash ^= 397 * Sku.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Quality.GetHashCode();
                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                hash ^= 397 * StockOnHand.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ICreateProductResult
    {
        public global::MyMarketManager.GraphQL.Client.ICreateProduct_CreateProduct CreateProduct { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ICreateProduct_CreateProduct
    {
        public global::System.Guid Id { get; }
        public global::System.String? Sku { get; }
        public global::System.String Name { get; }
        public global::System.String? Description { get; }
        public global::MyMarketManager.GraphQL.Client.ProductQuality Quality { get; }
        public global::System.String? Notes { get; }
        public global::System.Int32 StockOnHand { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ICreateProduct_CreateProduct_Product : ICreateProduct_CreateProduct
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class DeleteProductResult : global::System.IEquatable<DeleteProductResult>, IDeleteProductResult
    {
        public DeleteProductResult(global::System.Boolean deleteProduct)
        {
            DeleteProduct = deleteProduct;
        }

        public global::System.Boolean DeleteProduct { get; }

        public virtual global::System.Boolean Equals(DeleteProductResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(DeleteProduct, other.DeleteProduct));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteProductResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteProduct.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IDeleteProductResult
    {
        public global::System.Boolean DeleteProduct { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductByIdResult : global::System.IEquatable<GetProductByIdResult>, IGetProductByIdResult
    {
        public GetProductByIdResult(global::MyMarketManager.GraphQL.Client.IGetProductById_ProductById? productById)
        {
            ProductById = productById;
        }

        public global::MyMarketManager.GraphQL.Client.IGetProductById_ProductById? ProductById { get; }

        public virtual global::System.Boolean Equals(GetProductByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ProductById is null && other.ProductById is null) || ProductById != null && ProductById.Equals(other.ProductById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProductByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ProductById != null)
                {
                    hash ^= 397 * ProductById.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductById_ProductById_Product : global::System.IEquatable<GetProductById_ProductById_Product>, IGetProductById_ProductById_Product
    {
        public GetProductById_ProductById_Product(global::System.Guid id, global::System.String? sku, global::System.String name, global::System.String? description, global::MyMarketManager.GraphQL.Client.ProductQuality quality, global::System.String? notes, global::System.Int32 stockOnHand)
        {
            Id = id;
            Sku = sku;
            Name = name;
            Description = description;
            Quality = quality;
            Notes = notes;
            StockOnHand = stockOnHand;
        }

        public global::System.Guid Id { get; }
        public global::System.String? Sku { get; }
        public global::System.String Name { get; }
        public global::System.String? Description { get; }
        public global::MyMarketManager.GraphQL.Client.ProductQuality Quality { get; }
        public global::System.String? Notes { get; }
        public global::System.Int32 StockOnHand { get; }

        public virtual global::System.Boolean Equals(GetProductById_ProductById_Product? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Sku is null && other.Sku is null) || Sku != null && Sku.Equals(other.Sku)) && Name.Equals(other.Name) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Quality.Equals(other.Quality) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes)) && global::System.Object.Equals(StockOnHand, other.StockOnHand);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProductById_ProductById_Product)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Sku != null)
                {
                    hash ^= 397 * Sku.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Quality.GetHashCode();
                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                hash ^= 397 * StockOnHand.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetProductByIdResult
    {
        public global::MyMarketManager.GraphQL.Client.IGetProductById_ProductById? ProductById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetProductById_ProductById
    {
        public global::System.Guid Id { get; }
        public global::System.String? Sku { get; }
        public global::System.String Name { get; }
        public global::System.String? Description { get; }
        public global::MyMarketManager.GraphQL.Client.ProductQuality Quality { get; }
        public global::System.String? Notes { get; }
        public global::System.Int32 StockOnHand { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetProductById_ProductById_Product : IGetProductById_ProductById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductsResult : global::System.IEquatable<GetProductsResult>, IGetProductsResult
    {
        public GetProductsResult(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetProducts_Products> products)
        {
            Products = products;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetProducts_Products> Products { get; }

        public virtual global::System.Boolean Equals(GetProductsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Products, other.Products));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProductsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Products_elm in Products)
                {
                    hash ^= 397 * Products_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProducts_Products_Product : global::System.IEquatable<GetProducts_Products_Product>, IGetProducts_Products_Product
    {
        public GetProducts_Products_Product(global::System.Guid id, global::System.String? sku, global::System.String name, global::System.String? description, global::MyMarketManager.GraphQL.Client.ProductQuality quality, global::System.String? notes, global::System.Int32 stockOnHand)
        {
            Id = id;
            Sku = sku;
            Name = name;
            Description = description;
            Quality = quality;
            Notes = notes;
            StockOnHand = stockOnHand;
        }

        public global::System.Guid Id { get; }
        public global::System.String? Sku { get; }
        public global::System.String Name { get; }
        public global::System.String? Description { get; }
        public global::MyMarketManager.GraphQL.Client.ProductQuality Quality { get; }
        public global::System.String? Notes { get; }
        public global::System.Int32 StockOnHand { get; }

        public virtual global::System.Boolean Equals(GetProducts_Products_Product? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Sku is null && other.Sku is null) || Sku != null && Sku.Equals(other.Sku)) && Name.Equals(other.Name) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Quality.Equals(other.Quality) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes)) && global::System.Object.Equals(StockOnHand, other.StockOnHand);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProducts_Products_Product)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Sku != null)
                {
                    hash ^= 397 * Sku.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Quality.GetHashCode();
                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                hash ^= 397 * StockOnHand.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetProductsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetProducts_Products> Products { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetProducts_Products
    {
        public global::System.Guid Id { get; }
        public global::System.String? Sku { get; }
        public global::System.String Name { get; }
        public global::System.String? Description { get; }
        public global::MyMarketManager.GraphQL.Client.ProductQuality Quality { get; }
        public global::System.String? Notes { get; }
        public global::System.Int32 StockOnHand { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetProducts_Products_Product : IGetProducts_Products
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UpdateProductResult : global::System.IEquatable<UpdateProductResult>, IUpdateProductResult
    {
        public UpdateProductResult(global::MyMarketManager.GraphQL.Client.IUpdateProduct_UpdateProduct updateProduct)
        {
            UpdateProduct = updateProduct;
        }

        public global::MyMarketManager.GraphQL.Client.IUpdateProduct_UpdateProduct UpdateProduct { get; }

        public virtual global::System.Boolean Equals(UpdateProductResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UpdateProduct.Equals(other.UpdateProduct));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateProductResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UpdateProduct.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UpdateProduct_UpdateProduct_Product : global::System.IEquatable<UpdateProduct_UpdateProduct_Product>, IUpdateProduct_UpdateProduct_Product
    {
        public UpdateProduct_UpdateProduct_Product(global::System.Guid id, global::System.String? sku, global::System.String name, global::System.String? description, global::MyMarketManager.GraphQL.Client.ProductQuality quality, global::System.String? notes, global::System.Int32 stockOnHand)
        {
            Id = id;
            Sku = sku;
            Name = name;
            Description = description;
            Quality = quality;
            Notes = notes;
            StockOnHand = stockOnHand;
        }

        public global::System.Guid Id { get; }
        public global::System.String? Sku { get; }
        public global::System.String Name { get; }
        public global::System.String? Description { get; }
        public global::MyMarketManager.GraphQL.Client.ProductQuality Quality { get; }
        public global::System.String? Notes { get; }
        public global::System.Int32 StockOnHand { get; }

        public virtual global::System.Boolean Equals(UpdateProduct_UpdateProduct_Product? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Sku is null && other.Sku is null) || Sku != null && Sku.Equals(other.Sku)) && Name.Equals(other.Name) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Quality.Equals(other.Quality) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes)) && global::System.Object.Equals(StockOnHand, other.StockOnHand);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateProduct_UpdateProduct_Product)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Sku != null)
                {
                    hash ^= 397 * Sku.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Quality.GetHashCode();
                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                hash ^= 397 * StockOnHand.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IUpdateProductResult
    {
        public global::MyMarketManager.GraphQL.Client.IUpdateProduct_UpdateProduct UpdateProduct { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IUpdateProduct_UpdateProduct
    {
        public global::System.Guid Id { get; }
        public global::System.String? Sku { get; }
        public global::System.String Name { get; }
        public global::System.String? Description { get; }
        public global::MyMarketManager.GraphQL.Client.ProductQuality Quality { get; }
        public global::System.String? Notes { get; }
        public global::System.Int32 StockOnHand { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IUpdateProduct_UpdateProduct_Product : IUpdateProduct_UpdateProduct
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetAvailableScrapersResult : global::System.IEquatable<GetAvailableScrapersResult>, IGetAvailableScrapersResult
    {
        public GetAvailableScrapersResult(global::System.Collections.Generic.IReadOnlyList<global::System.String> availableScrapers)
        {
            AvailableScrapers = availableScrapers;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String> AvailableScrapers { get; }

        public virtual global::System.Boolean Equals(GetAvailableScrapersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(AvailableScrapers, other.AvailableScrapers));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAvailableScrapersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var AvailableScrapers_elm in AvailableScrapers)
                {
                    hash ^= 397 * AvailableScrapers_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetAvailableScrapersResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> AvailableScrapers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrderByIdResult : global::System.IEquatable<GetPurchaseOrderByIdResult>, IGetPurchaseOrderByIdResult
    {
        public GetPurchaseOrderByIdResult(global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderById_PurchaseOrderById? purchaseOrderById)
        {
            PurchaseOrderById = purchaseOrderById;
        }

        public global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderById_PurchaseOrderById? PurchaseOrderById { get; }

        public virtual global::System.Boolean Equals(GetPurchaseOrderByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PurchaseOrderById is null && other.PurchaseOrderById is null) || PurchaseOrderById != null && PurchaseOrderById.Equals(other.PurchaseOrderById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPurchaseOrderByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PurchaseOrderById != null)
                {
                    hash ^= 397 * PurchaseOrderById.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrderById_PurchaseOrderById_PurchaseOrderDetailDto : global::System.IEquatable<GetPurchaseOrderById_PurchaseOrderById_PurchaseOrderDetailDto>, IGetPurchaseOrderById_PurchaseOrderById_PurchaseOrderDetailDto
    {
        public GetPurchaseOrderById_PurchaseOrderById_PurchaseOrderDetailDto(global::System.Guid id, global::System.Guid supplierId, global::System.String supplierName, global::System.DateTimeOffset orderDate, global::MyMarketManager.GraphQL.Client.ProcessingStatus status, global::System.Decimal shippingFees, global::System.Decimal importFees, global::System.Decimal insuranceFees, global::System.Decimal additionalFees, global::System.String? notes, global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderById_PurchaseOrderById_Items> items)
        {
            Id = id;
            SupplierId = supplierId;
            SupplierName = supplierName;
            OrderDate = orderDate;
            Status = status;
            ShippingFees = shippingFees;
            ImportFees = importFees;
            InsuranceFees = insuranceFees;
            AdditionalFees = additionalFees;
            Notes = notes;
            Items = items;
        }

        public global::System.Guid Id { get; }
        public global::System.Guid SupplierId { get; }
        public global::System.String SupplierName { get; }
        public global::System.DateTimeOffset OrderDate { get; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus Status { get; }
        public global::System.Decimal ShippingFees { get; }
        public global::System.Decimal ImportFees { get; }
        public global::System.Decimal InsuranceFees { get; }
        public global::System.Decimal AdditionalFees { get; }
        public global::System.String? Notes { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderById_PurchaseOrderById_Items> Items { get; }

        public virtual global::System.Boolean Equals(GetPurchaseOrderById_PurchaseOrderById_PurchaseOrderDetailDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && SupplierId.Equals(other.SupplierId) && SupplierName.Equals(other.SupplierName) && OrderDate.Equals(other.OrderDate) && Status.Equals(other.Status) && global::System.Object.Equals(ShippingFees, other.ShippingFees) && global::System.Object.Equals(ImportFees, other.ImportFees) && global::System.Object.Equals(InsuranceFees, other.InsuranceFees) && global::System.Object.Equals(AdditionalFees, other.AdditionalFees) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Items, other.Items);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPurchaseOrderById_PurchaseOrderById_PurchaseOrderDetailDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * SupplierId.GetHashCode();
                hash ^= 397 * SupplierName.GetHashCode();
                hash ^= 397 * OrderDate.GetHashCode();
                hash ^= 397 * Status.GetHashCode();
                hash ^= 397 * ShippingFees.GetHashCode();
                hash ^= 397 * ImportFees.GetHashCode();
                hash ^= 397 * InsuranceFees.GetHashCode();
                hash ^= 397 * AdditionalFees.GetHashCode();
                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                foreach (var Items_elm in Items)
                {
                    hash ^= 397 * Items_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrderById_PurchaseOrderById_Items_PurchaseOrderItemDto : global::System.IEquatable<GetPurchaseOrderById_PurchaseOrderById_Items_PurchaseOrderItemDto>, IGetPurchaseOrderById_PurchaseOrderById_Items_PurchaseOrderItemDto
    {
        public GetPurchaseOrderById_PurchaseOrderById_Items_PurchaseOrderItemDto(global::System.Guid id, global::System.Guid? productId, global::System.String? productName, global::System.String? supplierReference, global::System.String? supplierProductUrl, global::System.String name, global::System.String? description, global::System.Int32 quantity, global::System.Decimal listedUnitPrice, global::System.Decimal actualUnitPrice, global::System.Decimal allocatedUnitOverhead, global::System.Decimal totalUnitCost)
        {
            Id = id;
            ProductId = productId;
            ProductName = productName;
            SupplierReference = supplierReference;
            SupplierProductUrl = supplierProductUrl;
            Name = name;
            Description = description;
            Quantity = quantity;
            ListedUnitPrice = listedUnitPrice;
            ActualUnitPrice = actualUnitPrice;
            AllocatedUnitOverhead = allocatedUnitOverhead;
            TotalUnitCost = totalUnitCost;
        }

        public global::System.Guid Id { get; }
        public global::System.Guid? ProductId { get; }
        public global::System.String? ProductName { get; }
        public global::System.String? SupplierReference { get; }
        public global::System.String? SupplierProductUrl { get; }
        public global::System.String Name { get; }
        public global::System.String? Description { get; }
        public global::System.Int32 Quantity { get; }
        public global::System.Decimal ListedUnitPrice { get; }
        public global::System.Decimal ActualUnitPrice { get; }
        public global::System.Decimal AllocatedUnitOverhead { get; }
        public global::System.Decimal TotalUnitCost { get; }

        public virtual global::System.Boolean Equals(GetPurchaseOrderById_PurchaseOrderById_Items_PurchaseOrderItemDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((ProductId is null && other.ProductId is null) || ProductId != null && ProductId.Equals(other.ProductId)) && ((ProductName is null && other.ProductName is null) || ProductName != null && ProductName.Equals(other.ProductName)) && ((SupplierReference is null && other.SupplierReference is null) || SupplierReference != null && SupplierReference.Equals(other.SupplierReference)) && ((SupplierProductUrl is null && other.SupplierProductUrl is null) || SupplierProductUrl != null && SupplierProductUrl.Equals(other.SupplierProductUrl)) && Name.Equals(other.Name) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && global::System.Object.Equals(Quantity, other.Quantity) && global::System.Object.Equals(ListedUnitPrice, other.ListedUnitPrice) && global::System.Object.Equals(ActualUnitPrice, other.ActualUnitPrice) && global::System.Object.Equals(AllocatedUnitOverhead, other.AllocatedUnitOverhead) && global::System.Object.Equals(TotalUnitCost, other.TotalUnitCost);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPurchaseOrderById_PurchaseOrderById_Items_PurchaseOrderItemDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (ProductId != null)
                {
                    hash ^= 397 * ProductId.GetHashCode();
                }

                if (ProductName != null)
                {
                    hash ^= 397 * ProductName.GetHashCode();
                }

                if (SupplierReference != null)
                {
                    hash ^= 397 * SupplierReference.GetHashCode();
                }

                if (SupplierProductUrl != null)
                {
                    hash ^= 397 * SupplierProductUrl.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Quantity.GetHashCode();
                hash ^= 397 * ListedUnitPrice.GetHashCode();
                hash ^= 397 * ActualUnitPrice.GetHashCode();
                hash ^= 397 * AllocatedUnitOverhead.GetHashCode();
                hash ^= 397 * TotalUnitCost.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetPurchaseOrderByIdResult
    {
        public global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderById_PurchaseOrderById? PurchaseOrderById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetPurchaseOrderById_PurchaseOrderById
    {
        public global::System.Guid Id { get; }
        public global::System.Guid SupplierId { get; }
        public global::System.String SupplierName { get; }
        public global::System.DateTimeOffset OrderDate { get; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus Status { get; }
        public global::System.Decimal ShippingFees { get; }
        public global::System.Decimal ImportFees { get; }
        public global::System.Decimal InsuranceFees { get; }
        public global::System.Decimal AdditionalFees { get; }
        public global::System.String? Notes { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderById_PurchaseOrderById_Items> Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetPurchaseOrderById_PurchaseOrderById_PurchaseOrderDetailDto : IGetPurchaseOrderById_PurchaseOrderById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetPurchaseOrderById_PurchaseOrderById_Items
    {
        public global::System.Guid Id { get; }
        public global::System.Guid? ProductId { get; }
        public global::System.String? ProductName { get; }
        public global::System.String? SupplierReference { get; }
        public global::System.String? SupplierProductUrl { get; }
        public global::System.String Name { get; }
        public global::System.String? Description { get; }
        public global::System.Int32 Quantity { get; }
        public global::System.Decimal ListedUnitPrice { get; }
        public global::System.Decimal ActualUnitPrice { get; }
        public global::System.Decimal AllocatedUnitOverhead { get; }
        public global::System.Decimal TotalUnitCost { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetPurchaseOrderById_PurchaseOrderById_Items_PurchaseOrderItemDto : IGetPurchaseOrderById_PurchaseOrderById_Items
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrdersResult : global::System.IEquatable<GetPurchaseOrdersResult>, IGetPurchaseOrdersResult
    {
        public GetPurchaseOrdersResult(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrders_PurchaseOrders> purchaseOrders)
        {
            PurchaseOrders = purchaseOrders;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrders_PurchaseOrders> PurchaseOrders { get; }

        public virtual global::System.Boolean Equals(GetPurchaseOrdersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(PurchaseOrders, other.PurchaseOrders));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPurchaseOrdersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var PurchaseOrders_elm in PurchaseOrders)
                {
                    hash ^= 397 * PurchaseOrders_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrders_PurchaseOrders_PurchaseOrderDto : global::System.IEquatable<GetPurchaseOrders_PurchaseOrders_PurchaseOrderDto>, IGetPurchaseOrders_PurchaseOrders_PurchaseOrderDto
    {
        public GetPurchaseOrders_PurchaseOrders_PurchaseOrderDto(global::System.Guid id, global::System.Guid supplierId, global::System.String supplierName, global::System.DateTimeOffset orderDate, global::MyMarketManager.GraphQL.Client.ProcessingStatus status, global::System.Int32 itemCount, global::System.Decimal shippingFees, global::System.Decimal importFees, global::System.Decimal insuranceFees, global::System.Decimal additionalFees, global::System.String? notes)
        {
            Id = id;
            SupplierId = supplierId;
            SupplierName = supplierName;
            OrderDate = orderDate;
            Status = status;
            ItemCount = itemCount;
            ShippingFees = shippingFees;
            ImportFees = importFees;
            InsuranceFees = insuranceFees;
            AdditionalFees = additionalFees;
            Notes = notes;
        }

        public global::System.Guid Id { get; }
        public global::System.Guid SupplierId { get; }
        public global::System.String SupplierName { get; }
        public global::System.DateTimeOffset OrderDate { get; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus Status { get; }
        public global::System.Int32 ItemCount { get; }
        public global::System.Decimal ShippingFees { get; }
        public global::System.Decimal ImportFees { get; }
        public global::System.Decimal InsuranceFees { get; }
        public global::System.Decimal AdditionalFees { get; }
        public global::System.String? Notes { get; }

        public virtual global::System.Boolean Equals(GetPurchaseOrders_PurchaseOrders_PurchaseOrderDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && SupplierId.Equals(other.SupplierId) && SupplierName.Equals(other.SupplierName) && OrderDate.Equals(other.OrderDate) && Status.Equals(other.Status) && global::System.Object.Equals(ItemCount, other.ItemCount) && global::System.Object.Equals(ShippingFees, other.ShippingFees) && global::System.Object.Equals(ImportFees, other.ImportFees) && global::System.Object.Equals(InsuranceFees, other.InsuranceFees) && global::System.Object.Equals(AdditionalFees, other.AdditionalFees) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPurchaseOrders_PurchaseOrders_PurchaseOrderDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * SupplierId.GetHashCode();
                hash ^= 397 * SupplierName.GetHashCode();
                hash ^= 397 * OrderDate.GetHashCode();
                hash ^= 397 * Status.GetHashCode();
                hash ^= 397 * ItemCount.GetHashCode();
                hash ^= 397 * ShippingFees.GetHashCode();
                hash ^= 397 * ImportFees.GetHashCode();
                hash ^= 397 * InsuranceFees.GetHashCode();
                hash ^= 397 * AdditionalFees.GetHashCode();
                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetPurchaseOrdersResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrders_PurchaseOrders> PurchaseOrders { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetPurchaseOrders_PurchaseOrders
    {
        public global::System.Guid Id { get; }
        public global::System.Guid SupplierId { get; }
        public global::System.String SupplierName { get; }
        public global::System.DateTimeOffset OrderDate { get; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus Status { get; }
        public global::System.Int32 ItemCount { get; }
        public global::System.Decimal ShippingFees { get; }
        public global::System.Decimal ImportFees { get; }
        public global::System.Decimal InsuranceFees { get; }
        public global::System.Decimal AdditionalFees { get; }
        public global::System.String? Notes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetPurchaseOrders_PurchaseOrders_PurchaseOrderDto : IGetPurchaseOrders_PurchaseOrders
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class SubmitCookiesResult : global::System.IEquatable<SubmitCookiesResult>, ISubmitCookiesResult
    {
        public SubmitCookiesResult(global::MyMarketManager.GraphQL.Client.ISubmitCookies_SubmitCookies submitCookies)
        {
            SubmitCookies = submitCookies;
        }

        public global::MyMarketManager.GraphQL.Client.ISubmitCookies_SubmitCookies SubmitCookies { get; }

        public virtual global::System.Boolean Equals(SubmitCookiesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SubmitCookies.Equals(other.SubmitCookies));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubmitCookiesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SubmitCookies.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class SubmitCookies_SubmitCookies_SubmitCookiesPayload : global::System.IEquatable<SubmitCookies_SubmitCookies_SubmitCookiesPayload>, ISubmitCookies_SubmitCookies_SubmitCookiesPayload
    {
        public SubmitCookies_SubmitCookies_SubmitCookiesPayload(global::System.Boolean success, global::System.Guid? batchId, global::System.String? message, global::System.String? error)
        {
            Success = success;
            BatchId = batchId;
            Message = message;
            Error = error;
        }

        public global::System.Boolean Success { get; }
        public global::System.Guid? BatchId { get; }
        public global::System.String? Message { get; }
        public global::System.String? Error { get; }

        public virtual global::System.Boolean Equals(SubmitCookies_SubmitCookies_SubmitCookiesPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Success, other.Success)) && ((BatchId is null && other.BatchId is null) || BatchId != null && BatchId.Equals(other.BatchId)) && ((Message is null && other.Message is null) || Message != null && Message.Equals(other.Message)) && ((Error is null && other.Error is null) || Error != null && Error.Equals(other.Error));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubmitCookies_SubmitCookies_SubmitCookiesPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Success.GetHashCode();
                if (BatchId != null)
                {
                    hash ^= 397 * BatchId.GetHashCode();
                }

                if (Message != null)
                {
                    hash ^= 397 * Message.GetHashCode();
                }

                if (Error != null)
                {
                    hash ^= 397 * Error.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ISubmitCookiesResult
    {
        public global::MyMarketManager.GraphQL.Client.ISubmitCookies_SubmitCookies SubmitCookies { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ISubmitCookies_SubmitCookies
    {
        public global::System.Boolean Success { get; }
        public global::System.Guid? BatchId { get; }
        public global::System.String? Message { get; }
        public global::System.String? Error { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ISubmitCookies_SubmitCookies_SubmitCookiesPayload : ISubmitCookies_SubmitCookies
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchByIdResult : global::System.IEquatable<GetStagingBatchByIdResult>, IGetStagingBatchByIdResult
    {
        public GetStagingBatchByIdResult(global::MyMarketManager.GraphQL.Client.IGetStagingBatchById_StagingBatchById? stagingBatchById)
        {
            StagingBatchById = stagingBatchById;
        }

        public global::MyMarketManager.GraphQL.Client.IGetStagingBatchById_StagingBatchById? StagingBatchById { get; }

        public virtual global::System.Boolean Equals(GetStagingBatchByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((StagingBatchById is null && other.StagingBatchById is null) || StagingBatchById != null && StagingBatchById.Equals(other.StagingBatchById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetStagingBatchByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StagingBatchById != null)
                {
                    hash ^= 397 * StagingBatchById.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchById_StagingBatchById_StagingBatchDetailDto : global::System.IEquatable<GetStagingBatchById_StagingBatchById_StagingBatchDetailDto>, IGetStagingBatchById_StagingBatchById_StagingBatchDetailDto
    {
        public GetStagingBatchById_StagingBatchById_StagingBatchDetailDto(global::System.Guid id, global::MyMarketManager.GraphQL.Client.StagingBatchType batchType, global::System.String? batchProcessorName, global::System.Guid? supplierId, global::System.String? supplierName, global::System.DateTimeOffset startedAt, global::System.DateTimeOffset? completedAt, global::MyMarketManager.GraphQL.Client.ProcessingStatus status, global::System.String? notes, global::System.String? errorMessage, global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders> stagingPurchaseOrders)
        {
            Id = id;
            BatchType = batchType;
            BatchProcessorName = batchProcessorName;
            SupplierId = supplierId;
            SupplierName = supplierName;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            Status = status;
            Notes = notes;
            ErrorMessage = errorMessage;
            StagingPurchaseOrders = stagingPurchaseOrders;
        }

        public global::System.Guid Id { get; }
        public global::MyMarketManager.GraphQL.Client.StagingBatchType BatchType { get; }
        public global::System.String? BatchProcessorName { get; }
        public global::System.Guid? SupplierId { get; }
        public global::System.String? SupplierName { get; }
        public global::System.DateTimeOffset StartedAt { get; }
        public global::System.DateTimeOffset? CompletedAt { get; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus Status { get; }
        public global::System.String? Notes { get; }
        public global::System.String? ErrorMessage { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders> StagingPurchaseOrders { get; }

        public virtual global::System.Boolean Equals(GetStagingBatchById_StagingBatchById_StagingBatchDetailDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && BatchType.Equals(other.BatchType) && ((BatchProcessorName is null && other.BatchProcessorName is null) || BatchProcessorName != null && BatchProcessorName.Equals(other.BatchProcessorName)) && ((SupplierId is null && other.SupplierId is null) || SupplierId != null && SupplierId.Equals(other.SupplierId)) && ((SupplierName is null && other.SupplierName is null) || SupplierName != null && SupplierName.Equals(other.SupplierName)) && StartedAt.Equals(other.StartedAt) && ((CompletedAt is null && other.CompletedAt is null) || CompletedAt != null && CompletedAt.Equals(other.CompletedAt)) && Status.Equals(other.Status) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes)) && ((ErrorMessage is null && other.ErrorMessage is null) || ErrorMessage != null && ErrorMessage.Equals(other.ErrorMessage)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(StagingPurchaseOrders, other.StagingPurchaseOrders);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetStagingBatchById_StagingBatchById_StagingBatchDetailDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * BatchType.GetHashCode();
                if (BatchProcessorName != null)
                {
                    hash ^= 397 * BatchProcessorName.GetHashCode();
                }

                if (SupplierId != null)
                {
                    hash ^= 397 * SupplierId.GetHashCode();
                }

                if (SupplierName != null)
                {
                    hash ^= 397 * SupplierName.GetHashCode();
                }

                hash ^= 397 * StartedAt.GetHashCode();
                if (CompletedAt != null)
                {
                    hash ^= 397 * CompletedAt.GetHashCode();
                }

                hash ^= 397 * Status.GetHashCode();
                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                if (ErrorMessage != null)
                {
                    hash ^= 397 * ErrorMessage.GetHashCode();
                }

                foreach (var StagingPurchaseOrders_elm in StagingPurchaseOrders)
                {
                    hash ^= 397 * StagingPurchaseOrders_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchById_StagingBatchById_StagingPurchaseOrders_StagingPurchaseOrderDto : global::System.IEquatable<GetStagingBatchById_StagingBatchById_StagingPurchaseOrders_StagingPurchaseOrderDto>, IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders_StagingPurchaseOrderDto
    {
        public GetStagingBatchById_StagingBatchById_StagingPurchaseOrders_StagingPurchaseOrderDto(global::System.Guid id, global::System.String? supplierReference, global::System.DateTimeOffset orderDate, global::MyMarketManager.GraphQL.Client.ProcessingStatus status, global::System.Boolean isImported, global::System.String? errorMessage, global::System.Int32 itemCount)
        {
            Id = id;
            SupplierReference = supplierReference;
            OrderDate = orderDate;
            Status = status;
            IsImported = isImported;
            ErrorMessage = errorMessage;
            ItemCount = itemCount;
        }

        public global::System.Guid Id { get; }
        public global::System.String? SupplierReference { get; }
        public global::System.DateTimeOffset OrderDate { get; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus Status { get; }
        public global::System.Boolean IsImported { get; }
        public global::System.String? ErrorMessage { get; }
        public global::System.Int32 ItemCount { get; }

        public virtual global::System.Boolean Equals(GetStagingBatchById_StagingBatchById_StagingPurchaseOrders_StagingPurchaseOrderDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((SupplierReference is null && other.SupplierReference is null) || SupplierReference != null && SupplierReference.Equals(other.SupplierReference)) && OrderDate.Equals(other.OrderDate) && Status.Equals(other.Status) && global::System.Object.Equals(IsImported, other.IsImported) && ((ErrorMessage is null && other.ErrorMessage is null) || ErrorMessage != null && ErrorMessage.Equals(other.ErrorMessage)) && global::System.Object.Equals(ItemCount, other.ItemCount);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetStagingBatchById_StagingBatchById_StagingPurchaseOrders_StagingPurchaseOrderDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (SupplierReference != null)
                {
                    hash ^= 397 * SupplierReference.GetHashCode();
                }

                hash ^= 397 * OrderDate.GetHashCode();
                hash ^= 397 * Status.GetHashCode();
                hash ^= 397 * IsImported.GetHashCode();
                if (ErrorMessage != null)
                {
                    hash ^= 397 * ErrorMessage.GetHashCode();
                }

                hash ^= 397 * ItemCount.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetStagingBatchByIdResult
    {
        public global::MyMarketManager.GraphQL.Client.IGetStagingBatchById_StagingBatchById? StagingBatchById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetStagingBatchById_StagingBatchById
    {
        public global::System.Guid Id { get; }
        public global::MyMarketManager.GraphQL.Client.StagingBatchType BatchType { get; }
        public global::System.String? BatchProcessorName { get; }
        public global::System.Guid? SupplierId { get; }
        public global::System.String? SupplierName { get; }
        public global::System.DateTimeOffset StartedAt { get; }
        public global::System.DateTimeOffset? CompletedAt { get; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus Status { get; }
        public global::System.String? Notes { get; }
        public global::System.String? ErrorMessage { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders> StagingPurchaseOrders { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetStagingBatchById_StagingBatchById_StagingBatchDetailDto : IGetStagingBatchById_StagingBatchById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders
    {
        public global::System.Guid Id { get; }
        public global::System.String? SupplierReference { get; }
        public global::System.DateTimeOffset OrderDate { get; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus Status { get; }
        public global::System.Boolean IsImported { get; }
        public global::System.String? ErrorMessage { get; }
        public global::System.Int32 ItemCount { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders_StagingPurchaseOrderDto : IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchesResult : global::System.IEquatable<GetStagingBatchesResult>, IGetStagingBatchesResult
    {
        public GetStagingBatchesResult(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetStagingBatches_StagingBatches> stagingBatches)
        {
            StagingBatches = stagingBatches;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetStagingBatches_StagingBatches> StagingBatches { get; }

        public virtual global::System.Boolean Equals(GetStagingBatchesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(StagingBatches, other.StagingBatches));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetStagingBatchesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var StagingBatches_elm in StagingBatches)
                {
                    hash ^= 397 * StagingBatches_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatches_StagingBatches_StagingBatchDto : global::System.IEquatable<GetStagingBatches_StagingBatches_StagingBatchDto>, IGetStagingBatches_StagingBatches_StagingBatchDto
    {
        public GetStagingBatches_StagingBatches_StagingBatchDto(global::System.Guid id, global::MyMarketManager.GraphQL.Client.StagingBatchType batchType, global::System.String? batchProcessorName, global::System.Guid? supplierId, global::System.String? supplierName, global::System.DateTimeOffset startedAt, global::System.DateTimeOffset? completedAt, global::MyMarketManager.GraphQL.Client.ProcessingStatus status, global::System.String? notes, global::System.String? errorMessage, global::System.Int32 orderCount, global::System.Int32 itemCount)
        {
            Id = id;
            BatchType = batchType;
            BatchProcessorName = batchProcessorName;
            SupplierId = supplierId;
            SupplierName = supplierName;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            Status = status;
            Notes = notes;
            ErrorMessage = errorMessage;
            OrderCount = orderCount;
            ItemCount = itemCount;
        }

        public global::System.Guid Id { get; }
        public global::MyMarketManager.GraphQL.Client.StagingBatchType BatchType { get; }
        public global::System.String? BatchProcessorName { get; }
        public global::System.Guid? SupplierId { get; }
        public global::System.String? SupplierName { get; }
        public global::System.DateTimeOffset StartedAt { get; }
        public global::System.DateTimeOffset? CompletedAt { get; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus Status { get; }
        public global::System.String? Notes { get; }
        public global::System.String? ErrorMessage { get; }
        public global::System.Int32 OrderCount { get; }
        public global::System.Int32 ItemCount { get; }

        public virtual global::System.Boolean Equals(GetStagingBatches_StagingBatches_StagingBatchDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && BatchType.Equals(other.BatchType) && ((BatchProcessorName is null && other.BatchProcessorName is null) || BatchProcessorName != null && BatchProcessorName.Equals(other.BatchProcessorName)) && ((SupplierId is null && other.SupplierId is null) || SupplierId != null && SupplierId.Equals(other.SupplierId)) && ((SupplierName is null && other.SupplierName is null) || SupplierName != null && SupplierName.Equals(other.SupplierName)) && StartedAt.Equals(other.StartedAt) && ((CompletedAt is null && other.CompletedAt is null) || CompletedAt != null && CompletedAt.Equals(other.CompletedAt)) && Status.Equals(other.Status) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes)) && ((ErrorMessage is null && other.ErrorMessage is null) || ErrorMessage != null && ErrorMessage.Equals(other.ErrorMessage)) && global::System.Object.Equals(OrderCount, other.OrderCount) && global::System.Object.Equals(ItemCount, other.ItemCount);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetStagingBatches_StagingBatches_StagingBatchDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * BatchType.GetHashCode();
                if (BatchProcessorName != null)
                {
                    hash ^= 397 * BatchProcessorName.GetHashCode();
                }

                if (SupplierId != null)
                {
                    hash ^= 397 * SupplierId.GetHashCode();
                }

                if (SupplierName != null)
                {
                    hash ^= 397 * SupplierName.GetHashCode();
                }

                hash ^= 397 * StartedAt.GetHashCode();
                if (CompletedAt != null)
                {
                    hash ^= 397 * CompletedAt.GetHashCode();
                }

                hash ^= 397 * Status.GetHashCode();
                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                if (ErrorMessage != null)
                {
                    hash ^= 397 * ErrorMessage.GetHashCode();
                }

                hash ^= 397 * OrderCount.GetHashCode();
                hash ^= 397 * ItemCount.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetStagingBatchesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetStagingBatches_StagingBatches> StagingBatches { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetStagingBatches_StagingBatches
    {
        public global::System.Guid Id { get; }
        public global::MyMarketManager.GraphQL.Client.StagingBatchType BatchType { get; }
        public global::System.String? BatchProcessorName { get; }
        public global::System.Guid? SupplierId { get; }
        public global::System.String? SupplierName { get; }
        public global::System.DateTimeOffset StartedAt { get; }
        public global::System.DateTimeOffset? CompletedAt { get; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus Status { get; }
        public global::System.String? Notes { get; }
        public global::System.String? ErrorMessage { get; }
        public global::System.Int32 OrderCount { get; }
        public global::System.Int32 ItemCount { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetStagingBatches_StagingBatches_StagingBatchDto : IGetStagingBatches_StagingBatches
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSuppliersResult : global::System.IEquatable<GetSuppliersResult>, IGetSuppliersResult
    {
        public GetSuppliersResult(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetSuppliers_Suppliers> suppliers)
        {
            Suppliers = suppliers;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetSuppliers_Suppliers> Suppliers { get; }

        public virtual global::System.Boolean Equals(GetSuppliersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Suppliers, other.Suppliers));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSuppliersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Suppliers_elm in Suppliers)
                {
                    hash ^= 397 * Suppliers_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSuppliers_Suppliers_SupplierOption : global::System.IEquatable<GetSuppliers_Suppliers_SupplierOption>, IGetSuppliers_Suppliers_SupplierOption
    {
        public GetSuppliers_Suppliers_SupplierOption(global::System.Guid id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetSuppliers_Suppliers_SupplierOption? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSuppliers_Suppliers_SupplierOption)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetSuppliersResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetSuppliers_Suppliers> Suppliers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetSuppliers_Suppliers
    {
        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetSuppliers_Suppliers_SupplierOption : IGetSuppliers_Suppliers
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateProductInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _productQualityFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "CreateProductInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _productQualityFormatter = serializerResolver.GetInputValueFormatter("ProductQuality");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::MyMarketManager.GraphQL.Client.CreateProductInput;
            var inputInfo = runtimeValue as global::MyMarketManager.GraphQL.Client.State.ICreateProductInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSkuSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("sku", FormatSku(input.Sku)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            if (inputInfo.IsQualitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("quality", FormatQuality(input.Quality)));
            }

            if (inputInfo.IsNotesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("notes", FormatNotes(input.Notes)));
            }

            if (inputInfo.IsStockOnHandSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("stockOnHand", FormatStockOnHand(input.StockOnHand)));
            }

            return fields;
        }

        private global::System.Object? FormatSku(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatQuality(global::MyMarketManager.GraphQL.Client.ProductQuality input)
        {
            return _productQualityFormatter.Format(input);
        }

        private global::System.Object? FormatNotes(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatStockOnHand(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record CreateProductInput : global::MyMarketManager.GraphQL.Client.State.ICreateProductInputInfo
    {
        public virtual global::System.Boolean Equals(CreateProductInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Sku is null && other.Sku is null) || Sku != null && Sku.Equals(other.Sku))) && Name.Equals(other.Name) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Quality.Equals(other.Quality) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes)) && global::System.Object.Equals(StockOnHand, other.StockOnHand);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Sku != null)
                {
                    hash ^= 397 * Sku.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Quality.GetHashCode();
                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                hash ^= 397 * StockOnHand.GetHashCode();
                return hash;
            }
        }

        private global::System.String? _value_sku;
        private global::System.Boolean _set_sku;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.String? _value_description;
        private global::System.Boolean _set_description;
        private global::MyMarketManager.GraphQL.Client.ProductQuality _value_quality;
        private global::System.Boolean _set_quality;
        private global::System.String? _value_notes;
        private global::System.Boolean _set_notes;
        private global::System.Int32 _value_stockOnHand;
        private global::System.Boolean _set_stockOnHand;
        public global::System.String? Sku
        {
            get => _value_sku;
            init
            {
                _set_sku = true;
                _value_sku = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.ICreateProductInputInfo.IsSkuSet => _set_sku;

        public global::System.String Name
        {
            get => _value_name;
            init
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.ICreateProductInputInfo.IsNameSet => _set_name;

        public global::System.String? Description
        {
            get => _value_description;
            init
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.ICreateProductInputInfo.IsDescriptionSet => _set_description;

        public global::MyMarketManager.GraphQL.Client.ProductQuality Quality
        {
            get => _value_quality;
            init
            {
                _set_quality = true;
                _value_quality = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.ICreateProductInputInfo.IsQualitySet => _set_quality;

        public global::System.String? Notes
        {
            get => _value_notes;
            init
            {
                _set_notes = true;
                _value_notes = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.ICreateProductInputInfo.IsNotesSet => _set_notes;

        public global::System.Int32 StockOnHand
        {
            get => _value_stockOnHand;
            init
            {
                _set_stockOnHand = true;
                _value_stockOnHand = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.ICreateProductInputInfo.IsStockOnHandSet => _set_stockOnHand;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UpdateProductInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _productQualityFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "UpdateProductInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _productQualityFormatter = serializerResolver.GetInputValueFormatter("ProductQuality");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::MyMarketManager.GraphQL.Client.UpdateProductInput;
            var inputInfo = runtimeValue as global::MyMarketManager.GraphQL.Client.State.IUpdateProductInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSkuSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("sku", FormatSku(input.Sku)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            if (inputInfo.IsQualitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("quality", FormatQuality(input.Quality)));
            }

            if (inputInfo.IsNotesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("notes", FormatNotes(input.Notes)));
            }

            if (inputInfo.IsStockOnHandSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("stockOnHand", FormatStockOnHand(input.StockOnHand)));
            }

            return fields;
        }

        private global::System.Object? FormatSku(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatQuality(global::MyMarketManager.GraphQL.Client.ProductQuality input)
        {
            return _productQualityFormatter.Format(input);
        }

        private global::System.Object? FormatNotes(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatStockOnHand(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record UpdateProductInput : global::MyMarketManager.GraphQL.Client.State.IUpdateProductInputInfo
    {
        public virtual global::System.Boolean Equals(UpdateProductInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Sku is null && other.Sku is null) || Sku != null && Sku.Equals(other.Sku))) && Name.Equals(other.Name) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Quality.Equals(other.Quality) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes)) && global::System.Object.Equals(StockOnHand, other.StockOnHand);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Sku != null)
                {
                    hash ^= 397 * Sku.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Quality.GetHashCode();
                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                hash ^= 397 * StockOnHand.GetHashCode();
                return hash;
            }
        }

        private global::System.String? _value_sku;
        private global::System.Boolean _set_sku;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.String? _value_description;
        private global::System.Boolean _set_description;
        private global::MyMarketManager.GraphQL.Client.ProductQuality _value_quality;
        private global::System.Boolean _set_quality;
        private global::System.String? _value_notes;
        private global::System.Boolean _set_notes;
        private global::System.Int32 _value_stockOnHand;
        private global::System.Boolean _set_stockOnHand;
        public global::System.String? Sku
        {
            get => _value_sku;
            init
            {
                _set_sku = true;
                _value_sku = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.IUpdateProductInputInfo.IsSkuSet => _set_sku;

        public global::System.String Name
        {
            get => _value_name;
            init
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.IUpdateProductInputInfo.IsNameSet => _set_name;

        public global::System.String? Description
        {
            get => _value_description;
            init
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.IUpdateProductInputInfo.IsDescriptionSet => _set_description;

        public global::MyMarketManager.GraphQL.Client.ProductQuality Quality
        {
            get => _value_quality;
            init
            {
                _set_quality = true;
                _value_quality = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.IUpdateProductInputInfo.IsQualitySet => _set_quality;

        public global::System.String? Notes
        {
            get => _value_notes;
            init
            {
                _set_notes = true;
                _value_notes = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.IUpdateProductInputInfo.IsNotesSet => _set_notes;

        public global::System.Int32 StockOnHand
        {
            get => _value_stockOnHand;
            init
            {
                _set_stockOnHand = true;
                _value_stockOnHand = value;
            }
        }

        global::System.Boolean global::MyMarketManager.GraphQL.Client.State.IUpdateProductInputInfo.IsStockOnHandSet => _set_stockOnHand;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public enum ProductQuality
    {
        Unknown,
        Terrible,
        Poor,
        Fair,
        Good,
        Excellent
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class ProductQualitySerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ProductQuality>
    {
        public global::System.String TypeName => "ProductQuality";

        public ProductQuality Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "UNKNOWN" => ProductQuality.Unknown,
                "TERRIBLE" => ProductQuality.Terrible,
                "POOR" => ProductQuality.Poor,
                "FAIR" => ProductQuality.Fair,
                "GOOD" => ProductQuality.Good,
                "EXCELLENT" => ProductQuality.Excellent,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum ProductQuality")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                ProductQuality.Unknown => "UNKNOWN",
                ProductQuality.Terrible => "TERRIBLE",
                ProductQuality.Poor => "POOR",
                ProductQuality.Fair => "FAIR",
                ProductQuality.Good => "GOOD",
                ProductQuality.Excellent => "EXCELLENT",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum ProductQuality value '{runtimeValue}' can't be converted to string")};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public enum StagingBatchType
    {
        WebScrape,
        BlobUpload
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class StagingBatchTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, StagingBatchType>
    {
        public global::System.String TypeName => "StagingBatchType";

        public StagingBatchType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "WEB_SCRAPE" => StagingBatchType.WebScrape,
                "BLOB_UPLOAD" => StagingBatchType.BlobUpload,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum StagingBatchType")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                StagingBatchType.WebScrape => "WEB_SCRAPE",
                StagingBatchType.BlobUpload => "BLOB_UPLOAD",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum StagingBatchType value '{runtimeValue}' can't be converted to string")};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public enum ProcessingStatus
    {
        Queued,
        Started,
        Completed,
        Failed,
        Cancelled
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class ProcessingStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ProcessingStatus>
    {
        public global::System.String TypeName => "ProcessingStatus";

        public ProcessingStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "QUEUED" => ProcessingStatus.Queued,
                "STARTED" => ProcessingStatus.Started,
                "COMPLETED" => ProcessingStatus.Completed,
                "FAILED" => ProcessingStatus.Failed,
                "CANCELLED" => ProcessingStatus.Cancelled,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum ProcessingStatus")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                ProcessingStatus.Queued => "QUEUED",
                ProcessingStatus.Started => "STARTED",
                ProcessingStatus.Completed => "COMPLETED",
                ProcessingStatus.Failed => "FAILED",
                ProcessingStatus.Cancelled => "CANCELLED",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum ProcessingStatus value '{runtimeValue}' can't be converted to string")};
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateProduct GraphQL operation
    /// <code>
    /// mutation CreateProduct($input: CreateProductInput!) {
    ///   createProduct(input: $input) {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateProductMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateProductMutationDocument()
        {
        }

        public static CreateProductMutationDocument Instance { get; } = new CreateProductMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x43,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x28,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x43,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x28,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x73,
            0x6b,
            0x75,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x69,
            0x74,
            0x79,
            0x20,
            0x6e,
            0x6f,
            0x74,
            0x65,
            0x73,
            0x20,
            0x73,
            0x74,
            0x6f,
            0x63,
            0x6b,
            0x4f,
            0x6e,
            0x48,
            0x61,
            0x6e,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c21bb1e52a77c2a598f025ea0e6f412c");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateProduct GraphQL operation
    /// <code>
    /// mutation CreateProduct($input: CreateProductInput!) {
    ///   createProduct(input: $input) {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateProductMutation : global::MyMarketManager.GraphQL.Client.ICreateProductMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateProductResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _createProductInputFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public CreateProductMutation(global::StrawberryShake.IOperationExecutor<ICreateProductResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _createProductInputFormatter = serializerResolver.GetInputValueFormatter("CreateProductInput");
        }

        private CreateProductMutation(global::StrawberryShake.IOperationExecutor<ICreateProductResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter createProductInputFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _createProductInputFormatter = createProductInputFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateProductResult);

        public global::MyMarketManager.GraphQL.Client.ICreateProductMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.CreateProductMutation(_operationExecutor, _configure.Add(configure), _createProductInputFormatter);
        }

        public global::MyMarketManager.GraphQL.Client.ICreateProductMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.ICreateProductMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateProductResult>> ExecuteAsync(global::MyMarketManager.GraphQL.Client.CreateProductInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateProductResult>> Watch(global::MyMarketManager.GraphQL.Client.CreateProductInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::MyMarketManager.GraphQL.Client.CreateProductInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateProductMutationDocument.Instance.Hash.Value, name: "CreateProduct", document: CreateProductMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::MyMarketManager.GraphQL.Client.CreateProductInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _createProductInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateProduct GraphQL operation
    /// <code>
    /// mutation CreateProduct($input: CreateProductInput!) {
    ///   createProduct(input: $input) {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ICreateProductMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.ICreateProductMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.ICreateProductMutation WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.ICreateProductMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateProductResult>> ExecuteAsync(global::MyMarketManager.GraphQL.Client.CreateProductInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateProductResult>> Watch(global::MyMarketManager.GraphQL.Client.CreateProductInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteProduct GraphQL operation
    /// <code>
    /// mutation DeleteProduct($id: UUID!) {
    ///   deleteProduct(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class DeleteProductMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteProductMutationDocument()
        {
        }

        public static DeleteProductMutationDocument Instance { get; } = new DeleteProductMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x44,
            0x65,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x28,
            0x24,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x55,
            0x55,
            0x49,
            0x44,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x64,
            0x65,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x28,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "474815e45352c54f21be3986a2248f75");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteProduct GraphQL operation
    /// <code>
    /// mutation DeleteProduct($id: UUID!) {
    ///   deleteProduct(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class DeleteProductMutation : global::MyMarketManager.GraphQL.Client.IDeleteProductMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteProductResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public DeleteProductMutation(global::StrawberryShake.IOperationExecutor<IDeleteProductResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        private DeleteProductMutation(global::StrawberryShake.IOperationExecutor<IDeleteProductResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter uUIDFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _uUIDFormatter = uUIDFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteProductResult);

        public global::MyMarketManager.GraphQL.Client.IDeleteProductMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.DeleteProductMutation(_operationExecutor, _configure.Add(configure), _uUIDFormatter);
        }

        public global::MyMarketManager.GraphQL.Client.IDeleteProductMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.IDeleteProductMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteProductResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteProductResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteProductMutationDocument.Instance.Hash.Value, name: "DeleteProduct", document: DeleteProductMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteProduct GraphQL operation
    /// <code>
    /// mutation DeleteProduct($id: UUID!) {
    ///   deleteProduct(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IDeleteProductMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.IDeleteProductMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.IDeleteProductMutation WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.IDeleteProductMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteProductResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteProductResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetProductById GraphQL operation
    /// <code>
    /// query GetProductById($id: UUID!) {
    ///   productById(id: $id) {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetProductByIdQueryDocument()
        {
        }

        public static GetProductByIdQueryDocument Instance { get; } = new GetProductByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x24,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x55,
            0x55,
            0x49,
            0x44,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x73,
            0x6b,
            0x75,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x69,
            0x74,
            0x79,
            0x20,
            0x6e,
            0x6f,
            0x74,
            0x65,
            0x73,
            0x20,
            0x73,
            0x74,
            0x6f,
            0x63,
            0x6b,
            0x4f,
            0x6e,
            0x48,
            0x61,
            0x6e,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "db6883dbe7eceb89564fe8e4407f2e40");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProductById GraphQL operation
    /// <code>
    /// query GetProductById($id: UUID!) {
    ///   productById(id: $id) {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductByIdQuery : global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetProductByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetProductByIdQuery(global::StrawberryShake.IOperationExecutor<IGetProductByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        private GetProductByIdQuery(global::StrawberryShake.IOperationExecutor<IGetProductByIdResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter uUIDFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _uUIDFormatter = uUIDFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetProductByIdResult);

        public global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.GetProductByIdQuery(_operationExecutor, _configure.Add(configure), _uUIDFormatter);
        }

        public global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProductByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProductByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetProductByIdQueryDocument.Instance.Hash.Value, name: "GetProductById", document: GetProductByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProductById GraphQL operation
    /// <code>
    /// query GetProductById($id: UUID!) {
    ///   productById(id: $id) {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetProductByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProductByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProductByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetProducts GraphQL operation
    /// <code>
    /// query GetProducts {
    ///   products {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetProductsQueryDocument()
        {
        }

        public static GetProductsQueryDocument Instance { get; } = new GetProductsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x73,
            0x6b,
            0x75,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x69,
            0x74,
            0x79,
            0x20,
            0x6e,
            0x6f,
            0x74,
            0x65,
            0x73,
            0x20,
            0x73,
            0x74,
            0x6f,
            0x63,
            0x6b,
            0x4f,
            0x6e,
            0x48,
            0x61,
            0x6e,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7c41213e956a827205c26ec08ec52d94");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProducts GraphQL operation
    /// <code>
    /// query GetProducts {
    ///   products {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductsQuery : global::MyMarketManager.GraphQL.Client.IGetProductsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetProductsResult> _operationExecutor;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetProductsQuery(global::StrawberryShake.IOperationExecutor<IGetProductsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        private GetProductsQuery(global::StrawberryShake.IOperationExecutor<IGetProductsResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetProductsResult);

        public global::MyMarketManager.GraphQL.Client.IGetProductsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.GetProductsQuery(_operationExecutor, _configure.Add(configure));
        }

        public global::MyMarketManager.GraphQL.Client.IGetProductsQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.IGetProductsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProductsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProductsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetProductsQueryDocument.Instance.Hash.Value, name: "GetProducts", document: GetProductsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProducts GraphQL operation
    /// <code>
    /// query GetProducts {
    ///   products {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetProductsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.IGetProductsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.IGetProductsQuery WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.IGetProductsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProductsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProductsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateProduct GraphQL operation
    /// <code>
    /// mutation UpdateProduct($id: UUID!, $input: UpdateProductInput!) {
    ///   updateProduct(id: $id, input: $input) {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UpdateProductMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateProductMutationDocument()
        {
        }

        public static UpdateProductMutationDocument Instance { get; } = new UpdateProductMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x28,
            0x24,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x55,
            0x55,
            0x49,
            0x44,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x55,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x28,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x2c,
            0x20,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x73,
            0x6b,
            0x75,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x69,
            0x74,
            0x79,
            0x20,
            0x6e,
            0x6f,
            0x74,
            0x65,
            0x73,
            0x20,
            0x73,
            0x74,
            0x6f,
            0x63,
            0x6b,
            0x4f,
            0x6e,
            0x48,
            0x61,
            0x6e,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a051d1e0d3b5a7c5f1bc8bbfe93857c7");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateProduct GraphQL operation
    /// <code>
    /// mutation UpdateProduct($id: UUID!, $input: UpdateProductInput!) {
    ///   updateProduct(id: $id, input: $input) {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UpdateProductMutation : global::MyMarketManager.GraphQL.Client.IUpdateProductMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateProductResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _updateProductInputFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public UpdateProductMutation(global::StrawberryShake.IOperationExecutor<IUpdateProductResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
            _updateProductInputFormatter = serializerResolver.GetInputValueFormatter("UpdateProductInput");
        }

        private UpdateProductMutation(global::StrawberryShake.IOperationExecutor<IUpdateProductResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter uUIDFormatter, global::StrawberryShake.Serialization.IInputValueFormatter updateProductInputFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _uUIDFormatter = uUIDFormatter;
            _updateProductInputFormatter = updateProductInputFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateProductResult);

        public global::MyMarketManager.GraphQL.Client.IUpdateProductMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.UpdateProductMutation(_operationExecutor, _configure.Add(configure), _uUIDFormatter, _updateProductInputFormatter);
        }

        public global::MyMarketManager.GraphQL.Client.IUpdateProductMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.IUpdateProductMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateProductResult>> ExecuteAsync(global::System.Guid id, global::MyMarketManager.GraphQL.Client.UpdateProductInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id, input);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateProductResult>> Watch(global::System.Guid id, global::MyMarketManager.GraphQL.Client.UpdateProductInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id, input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id, global::MyMarketManager.GraphQL.Client.UpdateProductInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateProductMutationDocument.Instance.Hash.Value, name: "UpdateProduct", document: UpdateProductMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        private global::System.Object? FormatInput(global::MyMarketManager.GraphQL.Client.UpdateProductInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _updateProductInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateProduct GraphQL operation
    /// <code>
    /// mutation UpdateProduct($id: UUID!, $input: UpdateProductInput!) {
    ///   updateProduct(id: $id, input: $input) {
    ///     __typename
    ///     id
    ///     sku
    ///     name
    ///     description
    ///     quality
    ///     notes
    ///     stockOnHand
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IUpdateProductMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.IUpdateProductMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.IUpdateProductMutation WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.IUpdateProductMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateProductResult>> ExecuteAsync(global::System.Guid id, global::MyMarketManager.GraphQL.Client.UpdateProductInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateProductResult>> Watch(global::System.Guid id, global::MyMarketManager.GraphQL.Client.UpdateProductInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetAvailableScrapers GraphQL operation
    /// <code>
    /// query GetAvailableScrapers($batchType: StagingBatchType!) {
    ///   availableScrapers(batchType: $batchType)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetAvailableScrapersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAvailableScrapersQueryDocument()
        {
        }

        public static GetAvailableScrapersQueryDocument Instance { get; } = new GetAvailableScrapersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x41,
            0x76,
            0x61,
            0x69,
            0x6c,
            0x61,
            0x62,
            0x6c,
            0x65,
            0x53,
            0x63,
            0x72,
            0x61,
            0x70,
            0x65,
            0x72,
            0x73,
            0x28,
            0x24,
            0x62,
            0x61,
            0x74,
            0x63,
            0x68,
            0x54,
            0x79,
            0x70,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x61,
            0x67,
            0x69,
            0x6e,
            0x67,
            0x42,
            0x61,
            0x74,
            0x63,
            0x68,
            0x54,
            0x79,
            0x70,
            0x65,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x76,
            0x61,
            0x69,
            0x6c,
            0x61,
            0x62,
            0x6c,
            0x65,
            0x53,
            0x63,
            0x72,
            0x61,
            0x70,
            0x65,
            0x72,
            0x73,
            0x28,
            0x62,
            0x61,
            0x74,
            0x63,
            0x68,
            0x54,
            0x79,
            0x70,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x62,
            0x61,
            0x74,
            0x63,
            0x68,
            0x54,
            0x79,
            0x70,
            0x65,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4f62bf69ee859f8fcad52a0b70bbf276");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAvailableScrapers GraphQL operation
    /// <code>
    /// query GetAvailableScrapers($batchType: StagingBatchType!) {
    ///   availableScrapers(batchType: $batchType)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetAvailableScrapersQuery : global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAvailableScrapersResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stagingBatchTypeFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetAvailableScrapersQuery(global::StrawberryShake.IOperationExecutor<IGetAvailableScrapersResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stagingBatchTypeFormatter = serializerResolver.GetInputValueFormatter("StagingBatchType");
        }

        private GetAvailableScrapersQuery(global::StrawberryShake.IOperationExecutor<IGetAvailableScrapersResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter stagingBatchTypeFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stagingBatchTypeFormatter = stagingBatchTypeFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAvailableScrapersResult);

        public global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.GetAvailableScrapersQuery(_operationExecutor, _configure.Add(configure), _stagingBatchTypeFormatter);
        }

        public global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAvailableScrapersResult>> ExecuteAsync(global::MyMarketManager.GraphQL.Client.StagingBatchType batchType, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(batchType);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAvailableScrapersResult>> Watch(global::MyMarketManager.GraphQL.Client.StagingBatchType batchType, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(batchType);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::MyMarketManager.GraphQL.Client.StagingBatchType batchType)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("batchType", FormatBatchType(batchType));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAvailableScrapersQueryDocument.Instance.Hash.Value, name: "GetAvailableScrapers", document: GetAvailableScrapersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatBatchType(global::MyMarketManager.GraphQL.Client.StagingBatchType value)
        {
            return _stagingBatchTypeFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAvailableScrapers GraphQL operation
    /// <code>
    /// query GetAvailableScrapers($batchType: StagingBatchType!) {
    ///   availableScrapers(batchType: $batchType)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetAvailableScrapersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAvailableScrapersResult>> ExecuteAsync(global::MyMarketManager.GraphQL.Client.StagingBatchType batchType, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAvailableScrapersResult>> Watch(global::MyMarketManager.GraphQL.Client.StagingBatchType batchType, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPurchaseOrderById GraphQL operation
    /// <code>
    /// query GetPurchaseOrderById($id: UUID!) {
    ///   purchaseOrderById(id: $id) {
    ///     __typename
    ///     id
    ///     supplierId
    ///     supplierName
    ///     orderDate
    ///     status
    ///     shippingFees
    ///     importFees
    ///     insuranceFees
    ///     additionalFees
    ///     notes
    ///     items {
    ///       __typename
    ///       id
    ///       productId
    ///       productName
    ///       supplierReference
    ///       supplierProductUrl
    ///       name
    ///       description
    ///       quantity
    ///       listedUnitPrice
    ///       actualUnitPrice
    ///       allocatedUnitOverhead
    ///       totalUnitCost
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrderByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPurchaseOrderByIdQueryDocument()
        {
        }

        public static GetPurchaseOrderByIdQueryDocument Instance { get; } = new GetPurchaseOrderByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x75,
            0x72,
            0x63,
            0x68,
            0x61,
            0x73,
            0x65,
            0x4f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x24,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x55,
            0x55,
            0x49,
            0x44,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x75,
            0x72,
            0x63,
            0x68,
            0x61,
            0x73,
            0x65,
            0x4f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x49,
            0x64,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x44,
            0x61,
            0x74,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x20,
            0x73,
            0x68,
            0x69,
            0x70,
            0x70,
            0x69,
            0x6e,
            0x67,
            0x46,
            0x65,
            0x65,
            0x73,
            0x20,
            0x69,
            0x6d,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x46,
            0x65,
            0x65,
            0x73,
            0x20,
            0x69,
            0x6e,
            0x73,
            0x75,
            0x72,
            0x61,
            0x6e,
            0x63,
            0x65,
            0x46,
            0x65,
            0x65,
            0x73,
            0x20,
            0x61,
            0x64,
            0x64,
            0x69,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x46,
            0x65,
            0x65,
            0x73,
            0x20,
            0x6e,
            0x6f,
            0x74,
            0x65,
            0x73,
            0x20,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x70,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x49,
            0x64,
            0x20,
            0x70,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x52,
            0x65,
            0x66,
            0x65,
            0x72,
            0x65,
            0x6e,
            0x63,
            0x65,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x55,
            0x72,
            0x6c,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x71,
            0x75,
            0x61,
            0x6e,
            0x74,
            0x69,
            0x74,
            0x79,
            0x20,
            0x6c,
            0x69,
            0x73,
            0x74,
            0x65,
            0x64,
            0x55,
            0x6e,
            0x69,
            0x74,
            0x50,
            0x72,
            0x69,
            0x63,
            0x65,
            0x20,
            0x61,
            0x63,
            0x74,
            0x75,
            0x61,
            0x6c,
            0x55,
            0x6e,
            0x69,
            0x74,
            0x50,
            0x72,
            0x69,
            0x63,
            0x65,
            0x20,
            0x61,
            0x6c,
            0x6c,
            0x6f,
            0x63,
            0x61,
            0x74,
            0x65,
            0x64,
            0x55,
            0x6e,
            0x69,
            0x74,
            0x4f,
            0x76,
            0x65,
            0x72,
            0x68,
            0x65,
            0x61,
            0x64,
            0x20,
            0x74,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x55,
            0x6e,
            0x69,
            0x74,
            0x43,
            0x6f,
            0x73,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8abedc6bc0f709f1f912025b91ea1ed3");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPurchaseOrderById GraphQL operation
    /// <code>
    /// query GetPurchaseOrderById($id: UUID!) {
    ///   purchaseOrderById(id: $id) {
    ///     __typename
    ///     id
    ///     supplierId
    ///     supplierName
    ///     orderDate
    ///     status
    ///     shippingFees
    ///     importFees
    ///     insuranceFees
    ///     additionalFees
    ///     notes
    ///     items {
    ///       __typename
    ///       id
    ///       productId
    ///       productName
    ///       supplierReference
    ///       supplierProductUrl
    ///       name
    ///       description
    ///       quantity
    ///       listedUnitPrice
    ///       actualUnitPrice
    ///       allocatedUnitOverhead
    ///       totalUnitCost
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrderByIdQuery : global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPurchaseOrderByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetPurchaseOrderByIdQuery(global::StrawberryShake.IOperationExecutor<IGetPurchaseOrderByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        private GetPurchaseOrderByIdQuery(global::StrawberryShake.IOperationExecutor<IGetPurchaseOrderByIdResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter uUIDFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _uUIDFormatter = uUIDFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPurchaseOrderByIdResult);

        public global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.GetPurchaseOrderByIdQuery(_operationExecutor, _configure.Add(configure), _uUIDFormatter);
        }

        public global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPurchaseOrderByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPurchaseOrderByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPurchaseOrderByIdQueryDocument.Instance.Hash.Value, name: "GetPurchaseOrderById", document: GetPurchaseOrderByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPurchaseOrderById GraphQL operation
    /// <code>
    /// query GetPurchaseOrderById($id: UUID!) {
    ///   purchaseOrderById(id: $id) {
    ///     __typename
    ///     id
    ///     supplierId
    ///     supplierName
    ///     orderDate
    ///     status
    ///     shippingFees
    ///     importFees
    ///     insuranceFees
    ///     additionalFees
    ///     notes
    ///     items {
    ///       __typename
    ///       id
    ///       productId
    ///       productName
    ///       supplierReference
    ///       supplierProductUrl
    ///       name
    ///       description
    ///       quantity
    ///       listedUnitPrice
    ///       actualUnitPrice
    ///       allocatedUnitOverhead
    ///       totalUnitCost
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetPurchaseOrderByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPurchaseOrderByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPurchaseOrderByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPurchaseOrders GraphQL operation
    /// <code>
    /// query GetPurchaseOrders {
    ///   purchaseOrders {
    ///     __typename
    ///     id
    ///     supplierId
    ///     supplierName
    ///     orderDate
    ///     status
    ///     itemCount
    ///     shippingFees
    ///     importFees
    ///     insuranceFees
    ///     additionalFees
    ///     notes
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrdersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPurchaseOrdersQueryDocument()
        {
        }

        public static GetPurchaseOrdersQueryDocument Instance { get; } = new GetPurchaseOrdersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x75,
            0x72,
            0x63,
            0x68,
            0x61,
            0x73,
            0x65,
            0x4f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x75,
            0x72,
            0x63,
            0x68,
            0x61,
            0x73,
            0x65,
            0x4f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x49,
            0x64,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x44,
            0x61,
            0x74,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x20,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x43,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x73,
            0x68,
            0x69,
            0x70,
            0x70,
            0x69,
            0x6e,
            0x67,
            0x46,
            0x65,
            0x65,
            0x73,
            0x20,
            0x69,
            0x6d,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x46,
            0x65,
            0x65,
            0x73,
            0x20,
            0x69,
            0x6e,
            0x73,
            0x75,
            0x72,
            0x61,
            0x6e,
            0x63,
            0x65,
            0x46,
            0x65,
            0x65,
            0x73,
            0x20,
            0x61,
            0x64,
            0x64,
            0x69,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x46,
            0x65,
            0x65,
            0x73,
            0x20,
            0x6e,
            0x6f,
            0x74,
            0x65,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "19f8fd13c63c8d8aa571a36a3053255e");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPurchaseOrders GraphQL operation
    /// <code>
    /// query GetPurchaseOrders {
    ///   purchaseOrders {
    ///     __typename
    ///     id
    ///     supplierId
    ///     supplierName
    ///     orderDate
    ///     status
    ///     itemCount
    ///     shippingFees
    ///     importFees
    ///     insuranceFees
    ///     additionalFees
    ///     notes
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrdersQuery : global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPurchaseOrdersResult> _operationExecutor;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetPurchaseOrdersQuery(global::StrawberryShake.IOperationExecutor<IGetPurchaseOrdersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        private GetPurchaseOrdersQuery(global::StrawberryShake.IOperationExecutor<IGetPurchaseOrdersResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPurchaseOrdersResult);

        public global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.GetPurchaseOrdersQuery(_operationExecutor, _configure.Add(configure));
        }

        public global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPurchaseOrdersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPurchaseOrdersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPurchaseOrdersQueryDocument.Instance.Hash.Value, name: "GetPurchaseOrders", document: GetPurchaseOrdersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPurchaseOrders GraphQL operation
    /// <code>
    /// query GetPurchaseOrders {
    ///   purchaseOrders {
    ///     __typename
    ///     id
    ///     supplierId
    ///     supplierName
    ///     orderDate
    ///     status
    ///     itemCount
    ///     shippingFees
    ///     importFees
    ///     insuranceFees
    ///     additionalFees
    ///     notes
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetPurchaseOrdersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPurchaseOrdersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPurchaseOrdersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SubmitCookies GraphQL operation
    /// <code>
    /// mutation SubmitCookies($supplierId: UUID!, $processorName: String!, $cookieJson: String!) {
    ///   submitCookies(input: { supplierId: $supplierId, processorName: $processorName, cookieJson: $cookieJson }) {
    ///     __typename
    ///     success
    ///     batchId
    ///     message
    ///     error
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class SubmitCookiesMutationDocument : global::StrawberryShake.IDocument
    {
        private SubmitCookiesMutationDocument()
        {
        }

        public static SubmitCookiesMutationDocument Instance { get; } = new SubmitCookiesMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x53,
            0x75,
            0x62,
            0x6d,
            0x69,
            0x74,
            0x43,
            0x6f,
            0x6f,
            0x6b,
            0x69,
            0x65,
            0x73,
            0x28,
            0x24,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x55,
            0x55,
            0x49,
            0x44,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x70,
            0x72,
            0x6f,
            0x63,
            0x65,
            0x73,
            0x73,
            0x6f,
            0x72,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x63,
            0x6f,
            0x6f,
            0x6b,
            0x69,
            0x65,
            0x4a,
            0x73,
            0x6f,
            0x6e,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x75,
            0x62,
            0x6d,
            0x69,
            0x74,
            0x43,
            0x6f,
            0x6f,
            0x6b,
            0x69,
            0x65,
            0x73,
            0x28,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x49,
            0x64,
            0x2c,
            0x20,
            0x70,
            0x72,
            0x6f,
            0x63,
            0x65,
            0x73,
            0x73,
            0x6f,
            0x72,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x70,
            0x72,
            0x6f,
            0x63,
            0x65,
            0x73,
            0x73,
            0x6f,
            0x72,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x2c,
            0x20,
            0x63,
            0x6f,
            0x6f,
            0x6b,
            0x69,
            0x65,
            0x4a,
            0x73,
            0x6f,
            0x6e,
            0x3a,
            0x20,
            0x24,
            0x63,
            0x6f,
            0x6f,
            0x6b,
            0x69,
            0x65,
            0x4a,
            0x73,
            0x6f,
            0x6e,
            0x20,
            0x7d,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x75,
            0x63,
            0x63,
            0x65,
            0x73,
            0x73,
            0x20,
            0x62,
            0x61,
            0x74,
            0x63,
            0x68,
            0x49,
            0x64,
            0x20,
            0x6d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d8182d5124103ec88d0639b093babf6b");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SubmitCookies GraphQL operation
    /// <code>
    /// mutation SubmitCookies($supplierId: UUID!, $processorName: String!, $cookieJson: String!) {
    ///   submitCookies(input: { supplierId: $supplierId, processorName: $processorName, cookieJson: $cookieJson }) {
    ///     __typename
    ///     success
    ///     batchId
    ///     message
    ///     error
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class SubmitCookiesMutation : global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISubmitCookiesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public SubmitCookiesMutation(global::StrawberryShake.IOperationExecutor<ISubmitCookiesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        private SubmitCookiesMutation(global::StrawberryShake.IOperationExecutor<ISubmitCookiesResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter, global::StrawberryShake.Serialization.IInputValueFormatter uUIDFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
            _uUIDFormatter = uUIDFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISubmitCookiesResult);

        public global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.SubmitCookiesMutation(_operationExecutor, _configure.Add(configure), _stringFormatter, _uUIDFormatter);
        }

        public global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISubmitCookiesResult>> ExecuteAsync(global::System.Guid supplierId, global::System.String processorName, global::System.String cookieJson, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(supplierId, processorName, cookieJson);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISubmitCookiesResult>> Watch(global::System.Guid supplierId, global::System.String processorName, global::System.String cookieJson, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(supplierId, processorName, cookieJson);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid supplierId, global::System.String processorName, global::System.String cookieJson)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("supplierId", FormatSupplierId(supplierId));
            variables.Add("processorName", FormatProcessorName(processorName));
            variables.Add("cookieJson", FormatCookieJson(cookieJson));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SubmitCookiesMutationDocument.Instance.Hash.Value, name: "SubmitCookies", document: SubmitCookiesMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSupplierId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        private global::System.Object? FormatProcessorName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatCookieJson(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SubmitCookies GraphQL operation
    /// <code>
    /// mutation SubmitCookies($supplierId: UUID!, $processorName: String!, $cookieJson: String!) {
    ///   submitCookies(input: { supplierId: $supplierId, processorName: $processorName, cookieJson: $cookieJson }) {
    ///     __typename
    ///     success
    ///     batchId
    ///     message
    ///     error
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ISubmitCookiesMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISubmitCookiesResult>> ExecuteAsync(global::System.Guid supplierId, global::System.String processorName, global::System.String cookieJson, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISubmitCookiesResult>> Watch(global::System.Guid supplierId, global::System.String processorName, global::System.String cookieJson, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetStagingBatchById GraphQL operation
    /// <code>
    /// query GetStagingBatchById($id: UUID!) {
    ///   stagingBatchById(id: $id) {
    ///     __typename
    ///     id
    ///     batchType
    ///     batchProcessorName
    ///     supplierId
    ///     supplierName
    ///     startedAt
    ///     completedAt
    ///     status
    ///     notes
    ///     errorMessage
    ///     stagingPurchaseOrders {
    ///       __typename
    ///       id
    ///       supplierReference
    ///       orderDate
    ///       status
    ///       isImported
    ///       errorMessage
    ///       itemCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetStagingBatchByIdQueryDocument()
        {
        }

        public static GetStagingBatchByIdQueryDocument Instance { get; } = new GetStagingBatchByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x53,
            0x74,
            0x61,
            0x67,
            0x69,
            0x6e,
            0x67,
            0x42,
            0x61,
            0x74,
            0x63,
            0x68,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x24,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x55,
            0x55,
            0x49,
            0x44,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x74,
            0x61,
            0x67,
            0x69,
            0x6e,
            0x67,
            0x42,
            0x61,
            0x74,
            0x63,
            0x68,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x62,
            0x61,
            0x74,
            0x63,
            0x68,
            0x54,
            0x79,
            0x70,
            0x65,
            0x20,
            0x62,
            0x61,
            0x74,
            0x63,
            0x68,
            0x50,
            0x72,
            0x6f,
            0x63,
            0x65,
            0x73,
            0x73,
            0x6f,
            0x72,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x49,
            0x64,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x72,
            0x74,
            0x65,
            0x64,
            0x41,
            0x74,
            0x20,
            0x63,
            0x6f,
            0x6d,
            0x70,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x64,
            0x41,
            0x74,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x20,
            0x6e,
            0x6f,
            0x74,
            0x65,
            0x73,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x4d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x67,
            0x69,
            0x6e,
            0x67,
            0x50,
            0x75,
            0x72,
            0x63,
            0x68,
            0x61,
            0x73,
            0x65,
            0x4f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x52,
            0x65,
            0x66,
            0x65,
            0x72,
            0x65,
            0x6e,
            0x63,
            0x65,
            0x20,
            0x6f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x44,
            0x61,
            0x74,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x20,
            0x69,
            0x73,
            0x49,
            0x6d,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x65,
            0x64,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x4d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x43,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "34b06e4006ef8af46767527d056fc0ee");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetStagingBatchById GraphQL operation
    /// <code>
    /// query GetStagingBatchById($id: UUID!) {
    ///   stagingBatchById(id: $id) {
    ///     __typename
    ///     id
    ///     batchType
    ///     batchProcessorName
    ///     supplierId
    ///     supplierName
    ///     startedAt
    ///     completedAt
    ///     status
    ///     notes
    ///     errorMessage
    ///     stagingPurchaseOrders {
    ///       __typename
    ///       id
    ///       supplierReference
    ///       orderDate
    ///       status
    ///       isImported
    ///       errorMessage
    ///       itemCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchByIdQuery : global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetStagingBatchByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetStagingBatchByIdQuery(global::StrawberryShake.IOperationExecutor<IGetStagingBatchByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        private GetStagingBatchByIdQuery(global::StrawberryShake.IOperationExecutor<IGetStagingBatchByIdResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter uUIDFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _uUIDFormatter = uUIDFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetStagingBatchByIdResult);

        public global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.GetStagingBatchByIdQuery(_operationExecutor, _configure.Add(configure), _uUIDFormatter);
        }

        public global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetStagingBatchByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetStagingBatchByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetStagingBatchByIdQueryDocument.Instance.Hash.Value, name: "GetStagingBatchById", document: GetStagingBatchByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetStagingBatchById GraphQL operation
    /// <code>
    /// query GetStagingBatchById($id: UUID!) {
    ///   stagingBatchById(id: $id) {
    ///     __typename
    ///     id
    ///     batchType
    ///     batchProcessorName
    ///     supplierId
    ///     supplierName
    ///     startedAt
    ///     completedAt
    ///     status
    ///     notes
    ///     errorMessage
    ///     stagingPurchaseOrders {
    ///       __typename
    ///       id
    ///       supplierReference
    ///       orderDate
    ///       status
    ///       isImported
    ///       errorMessage
    ///       itemCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetStagingBatchByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetStagingBatchByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetStagingBatchByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetStagingBatches GraphQL operation
    /// <code>
    /// query GetStagingBatches {
    ///   stagingBatches {
    ///     __typename
    ///     id
    ///     batchType
    ///     batchProcessorName
    ///     supplierId
    ///     supplierName
    ///     startedAt
    ///     completedAt
    ///     status
    ///     notes
    ///     errorMessage
    ///     orderCount
    ///     itemCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetStagingBatchesQueryDocument()
        {
        }

        public static GetStagingBatchesQueryDocument Instance { get; } = new GetStagingBatchesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x53,
            0x74,
            0x61,
            0x67,
            0x69,
            0x6e,
            0x67,
            0x42,
            0x61,
            0x74,
            0x63,
            0x68,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x74,
            0x61,
            0x67,
            0x69,
            0x6e,
            0x67,
            0x42,
            0x61,
            0x74,
            0x63,
            0x68,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x62,
            0x61,
            0x74,
            0x63,
            0x68,
            0x54,
            0x79,
            0x70,
            0x65,
            0x20,
            0x62,
            0x61,
            0x74,
            0x63,
            0x68,
            0x50,
            0x72,
            0x6f,
            0x63,
            0x65,
            0x73,
            0x73,
            0x6f,
            0x72,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x49,
            0x64,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x72,
            0x74,
            0x65,
            0x64,
            0x41,
            0x74,
            0x20,
            0x63,
            0x6f,
            0x6d,
            0x70,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x64,
            0x41,
            0x74,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x20,
            0x6e,
            0x6f,
            0x74,
            0x65,
            0x73,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x4d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x6f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x43,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x43,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b572e99d6b62b89fd7c2a418f84428f8");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetStagingBatches GraphQL operation
    /// <code>
    /// query GetStagingBatches {
    ///   stagingBatches {
    ///     __typename
    ///     id
    ///     batchType
    ///     batchProcessorName
    ///     supplierId
    ///     supplierName
    ///     startedAt
    ///     completedAt
    ///     status
    ///     notes
    ///     errorMessage
    ///     orderCount
    ///     itemCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchesQuery : global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetStagingBatchesResult> _operationExecutor;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetStagingBatchesQuery(global::StrawberryShake.IOperationExecutor<IGetStagingBatchesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        private GetStagingBatchesQuery(global::StrawberryShake.IOperationExecutor<IGetStagingBatchesResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetStagingBatchesResult);

        public global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.GetStagingBatchesQuery(_operationExecutor, _configure.Add(configure));
        }

        public global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetStagingBatchesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetStagingBatchesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetStagingBatchesQueryDocument.Instance.Hash.Value, name: "GetStagingBatches", document: GetStagingBatchesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetStagingBatches GraphQL operation
    /// <code>
    /// query GetStagingBatches {
    ///   stagingBatches {
    ///     __typename
    ///     id
    ///     batchType
    ///     batchProcessorName
    ///     supplierId
    ///     supplierName
    ///     startedAt
    ///     completedAt
    ///     status
    ///     notes
    ///     errorMessage
    ///     orderCount
    ///     itemCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetStagingBatchesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetStagingBatchesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetStagingBatchesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetSuppliers GraphQL operation
    /// <code>
    /// query GetSuppliers {
    ///   suppliers {
    ///     __typename
    ///     id
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSuppliersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSuppliersQueryDocument()
        {
        }

        public static GetSuppliersQueryDocument Instance { get; } = new GetSuppliersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x53,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x75,
            0x70,
            0x70,
            0x6c,
            0x69,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "bcc3c29e053648e6b1a545000f1a318b");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSuppliers GraphQL operation
    /// <code>
    /// query GetSuppliers {
    ///   suppliers {
    ///     __typename
    ///     id
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSuppliersQuery : global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSuppliersResult> _operationExecutor;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetSuppliersQuery(global::StrawberryShake.IOperationExecutor<IGetSuppliersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        private GetSuppliersQuery(global::StrawberryShake.IOperationExecutor<IGetSuppliersResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSuppliersResult);

        public global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::MyMarketManager.GraphQL.Client.GetSuppliersQuery(_operationExecutor, _configure.Add(configure));
        }

        public global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSuppliersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSuppliersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSuppliersQueryDocument.Instance.Hash.Value, name: "GetSuppliers", document: GetSuppliersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSuppliers GraphQL operation
    /// <code>
    /// query GetSuppliers {
    ///   suppliers {
    ///     __typename
    ///     id
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetSuppliersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery WithRequestUri(global::System.Uri requestUri);
        global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSuppliersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSuppliersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the MyMarketManagerClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class MyMarketManagerClient : global::MyMarketManager.GraphQL.Client.IMyMarketManagerClient
    {
        private readonly global::MyMarketManager.GraphQL.Client.ICreateProductMutation _createProduct;
        private readonly global::MyMarketManager.GraphQL.Client.IDeleteProductMutation _deleteProduct;
        private readonly global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery _getProductById;
        private readonly global::MyMarketManager.GraphQL.Client.IGetProductsQuery _getProducts;
        private readonly global::MyMarketManager.GraphQL.Client.IUpdateProductMutation _updateProduct;
        private readonly global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery _getAvailableScrapers;
        private readonly global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery _getPurchaseOrderById;
        private readonly global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery _getPurchaseOrders;
        private readonly global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation _submitCookies;
        private readonly global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery _getStagingBatchById;
        private readonly global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery _getStagingBatches;
        private readonly global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery _getSuppliers;
        public MyMarketManagerClient(global::MyMarketManager.GraphQL.Client.ICreateProductMutation createProduct, global::MyMarketManager.GraphQL.Client.IDeleteProductMutation deleteProduct, global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery getProductById, global::MyMarketManager.GraphQL.Client.IGetProductsQuery getProducts, global::MyMarketManager.GraphQL.Client.IUpdateProductMutation updateProduct, global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery getAvailableScrapers, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery getPurchaseOrderById, global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery getPurchaseOrders, global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation submitCookies, global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery getStagingBatchById, global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery getStagingBatches, global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery getSuppliers)
        {
            _createProduct = createProduct ?? throw new global::System.ArgumentNullException(nameof(createProduct));
            _deleteProduct = deleteProduct ?? throw new global::System.ArgumentNullException(nameof(deleteProduct));
            _getProductById = getProductById ?? throw new global::System.ArgumentNullException(nameof(getProductById));
            _getProducts = getProducts ?? throw new global::System.ArgumentNullException(nameof(getProducts));
            _updateProduct = updateProduct ?? throw new global::System.ArgumentNullException(nameof(updateProduct));
            _getAvailableScrapers = getAvailableScrapers ?? throw new global::System.ArgumentNullException(nameof(getAvailableScrapers));
            _getPurchaseOrderById = getPurchaseOrderById ?? throw new global::System.ArgumentNullException(nameof(getPurchaseOrderById));
            _getPurchaseOrders = getPurchaseOrders ?? throw new global::System.ArgumentNullException(nameof(getPurchaseOrders));
            _submitCookies = submitCookies ?? throw new global::System.ArgumentNullException(nameof(submitCookies));
            _getStagingBatchById = getStagingBatchById ?? throw new global::System.ArgumentNullException(nameof(getStagingBatchById));
            _getStagingBatches = getStagingBatches ?? throw new global::System.ArgumentNullException(nameof(getStagingBatches));
            _getSuppliers = getSuppliers ?? throw new global::System.ArgumentNullException(nameof(getSuppliers));
        }

        public static global::System.String ClientName => "MyMarketManagerClient";
        public global::MyMarketManager.GraphQL.Client.ICreateProductMutation CreateProduct => _createProduct;
        public global::MyMarketManager.GraphQL.Client.IDeleteProductMutation DeleteProduct => _deleteProduct;
        public global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery GetProductById => _getProductById;
        public global::MyMarketManager.GraphQL.Client.IGetProductsQuery GetProducts => _getProducts;
        public global::MyMarketManager.GraphQL.Client.IUpdateProductMutation UpdateProduct => _updateProduct;
        public global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery GetAvailableScrapers => _getAvailableScrapers;
        public global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery GetPurchaseOrderById => _getPurchaseOrderById;
        public global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery GetPurchaseOrders => _getPurchaseOrders;
        public global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation SubmitCookies => _submitCookies;
        public global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery GetStagingBatchById => _getStagingBatchById;
        public global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery GetStagingBatches => _getStagingBatches;
        public global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery GetSuppliers => _getSuppliers;
    }

    /// <summary>
    /// Represents the MyMarketManagerClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IMyMarketManagerClient
    {
        global::MyMarketManager.GraphQL.Client.ICreateProductMutation CreateProduct { get; }

        global::MyMarketManager.GraphQL.Client.IDeleteProductMutation DeleteProduct { get; }

        global::MyMarketManager.GraphQL.Client.IGetProductByIdQuery GetProductById { get; }

        global::MyMarketManager.GraphQL.Client.IGetProductsQuery GetProducts { get; }

        global::MyMarketManager.GraphQL.Client.IUpdateProductMutation UpdateProduct { get; }

        global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersQuery GetAvailableScrapers { get; }

        global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdQuery GetPurchaseOrderById { get; }

        global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersQuery GetPurchaseOrders { get; }

        global::MyMarketManager.GraphQL.Client.ISubmitCookiesMutation SubmitCookies { get; }

        global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdQuery GetStagingBatchById { get; }

        global::MyMarketManager.GraphQL.Client.IGetStagingBatchesQuery GetStagingBatches { get; }

        global::MyMarketManager.GraphQL.Client.IGetSuppliersQuery GetSuppliers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public enum MyMarketManagerClientProfileKind
    {
        Default,
        InMemory
    }
}

namespace MyMarketManager.GraphQL.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateProductResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.CreateProductResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateProductResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.ICreateProductResult);

        public CreateProductResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateProductResultInfo info)
            {
                return new CreateProductResult(MapNonNullableICreateProduct_CreateProduct(info.CreateProduct, snapshot));
            }

            throw new global::System.ArgumentException("CreateProductResultInfo expected.");
        }

        private global::MyMarketManager.GraphQL.Client.ICreateProduct_CreateProduct MapNonNullableICreateProduct_CreateProduct(global::MyMarketManager.GraphQL.Client.State.ProductData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICreateProduct_CreateProduct returnValue = default !;
            if (data.__typename.Equals("Product", global::System.StringComparison.Ordinal))
            {
                returnValue = new CreateProduct_CreateProduct_Product(data.Id ?? throw new global::System.ArgumentNullException(), data.Sku, data.Name ?? throw new global::System.ArgumentNullException(), data.Description, data.Quality ?? throw new global::System.ArgumentNullException(), data.Notes, data.StockOnHand ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateProductResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateProductResultInfo(global::MyMarketManager.GraphQL.Client.State.ProductData createProduct, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateProduct = createProduct;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::MyMarketManager.GraphQL.Client.State.ProductData CreateProduct { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateProductResultInfo(CreateProduct, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class DeleteProductResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.DeleteProductResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteProductResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.IDeleteProductResult);

        public DeleteProductResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteProductResultInfo info)
            {
                return new DeleteProductResult(info.DeleteProduct);
            }

            throw new global::System.ArgumentException("DeleteProductResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class DeleteProductResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteProductResultInfo(global::System.Boolean deleteProduct, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteProduct = deleteProduct;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean DeleteProduct { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteProductResultInfo(DeleteProduct, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.GetProductByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProductByIdResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.IGetProductByIdResult);

        public GetProductByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetProductByIdResultInfo info)
            {
                return new GetProductByIdResult(MapIGetProductById_ProductById(info.ProductById, snapshot));
            }

            throw new global::System.ArgumentException("GetProductByIdResultInfo expected.");
        }

        private global::MyMarketManager.GraphQL.Client.IGetProductById_ProductById? MapIGetProductById_ProductById(global::MyMarketManager.GraphQL.Client.State.ProductData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetProductById_ProductById returnValue = default !;
            if (data?.__typename.Equals("Product", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetProductById_ProductById_Product(data.Id ?? throw new global::System.ArgumentNullException(), data.Sku, data.Name ?? throw new global::System.ArgumentNullException(), data.Description, data.Quality ?? throw new global::System.ArgumentNullException(), data.Notes, data.StockOnHand ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetProductByIdResultInfo(global::MyMarketManager.GraphQL.Client.State.ProductData? productById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ProductById = productById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::MyMarketManager.GraphQL.Client.State.ProductData? ProductById { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetProductByIdResultInfo(ProductById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.GetProductsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProductsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.IGetProductsResult);

        public GetProductsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetProductsResultInfo info)
            {
                return new GetProductsResult(MapNonNullableIGetProducts_ProductsNonNullableArray(info.Products, snapshot));
            }

            throw new global::System.ArgumentException("GetProductsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetProducts_Products> MapNonNullableIGetProducts_ProductsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.ProductData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var products = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.IGetProducts_Products>();
            foreach (global::MyMarketManager.GraphQL.Client.State.ProductData child in list)
            {
                products.Add(MapNonNullableIGetProducts_Products(child, snapshot));
            }

            return products;
        }

        private global::MyMarketManager.GraphQL.Client.IGetProducts_Products MapNonNullableIGetProducts_Products(global::MyMarketManager.GraphQL.Client.State.ProductData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetProducts_Products returnValue = default !;
            if (data.__typename.Equals("Product", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetProducts_Products_Product(data.Id ?? throw new global::System.ArgumentNullException(), data.Sku, data.Name ?? throw new global::System.ArgumentNullException(), data.Description, data.Quality ?? throw new global::System.ArgumentNullException(), data.Notes, data.StockOnHand ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetProductsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.ProductData> products, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Products = products;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.ProductData> Products { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetProductsResultInfo(Products, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UpdateProductResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.UpdateProductResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateProductResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.IUpdateProductResult);

        public UpdateProductResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateProductResultInfo info)
            {
                return new UpdateProductResult(MapNonNullableIUpdateProduct_UpdateProduct(info.UpdateProduct, snapshot));
            }

            throw new global::System.ArgumentException("UpdateProductResultInfo expected.");
        }

        private global::MyMarketManager.GraphQL.Client.IUpdateProduct_UpdateProduct MapNonNullableIUpdateProduct_UpdateProduct(global::MyMarketManager.GraphQL.Client.State.ProductData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IUpdateProduct_UpdateProduct returnValue = default !;
            if (data.__typename.Equals("Product", global::System.StringComparison.Ordinal))
            {
                returnValue = new UpdateProduct_UpdateProduct_Product(data.Id ?? throw new global::System.ArgumentNullException(), data.Sku, data.Name ?? throw new global::System.ArgumentNullException(), data.Description, data.Quality ?? throw new global::System.ArgumentNullException(), data.Notes, data.StockOnHand ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UpdateProductResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateProductResultInfo(global::MyMarketManager.GraphQL.Client.State.ProductData updateProduct, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateProduct = updateProduct;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::MyMarketManager.GraphQL.Client.State.ProductData UpdateProduct { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateProductResultInfo(UpdateProduct, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetAvailableScrapersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.GetAvailableScrapersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAvailableScrapersResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult);

        public GetAvailableScrapersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAvailableScrapersResultInfo info)
            {
                return new GetAvailableScrapersResult(info.AvailableScrapers);
            }

            throw new global::System.ArgumentException("GetAvailableScrapersResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetAvailableScrapersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAvailableScrapersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::System.String> availableScrapers, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AvailableScrapers = availableScrapers;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String> AvailableScrapers { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAvailableScrapersResultInfo(AvailableScrapers, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrderByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.GetPurchaseOrderByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPurchaseOrderByIdResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult);

        public GetPurchaseOrderByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPurchaseOrderByIdResultInfo info)
            {
                return new GetPurchaseOrderByIdResult(MapIGetPurchaseOrderById_PurchaseOrderById(info.PurchaseOrderById, snapshot));
            }

            throw new global::System.ArgumentException("GetPurchaseOrderByIdResultInfo expected.");
        }

        private global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderById_PurchaseOrderById? MapIGetPurchaseOrderById_PurchaseOrderById(global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDetailDtoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPurchaseOrderById_PurchaseOrderById returnValue = default !;
            if (data?.__typename.Equals("PurchaseOrderDetailDto", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPurchaseOrderById_PurchaseOrderById_PurchaseOrderDetailDto(data.Id ?? throw new global::System.ArgumentNullException(), data.SupplierId ?? throw new global::System.ArgumentNullException(), data.SupplierName ?? throw new global::System.ArgumentNullException(), data.OrderDate ?? throw new global::System.ArgumentNullException(), data.Status ?? throw new global::System.ArgumentNullException(), data.ShippingFees ?? throw new global::System.ArgumentNullException(), data.ImportFees ?? throw new global::System.ArgumentNullException(), data.InsuranceFees ?? throw new global::System.ArgumentNullException(), data.AdditionalFees ?? throw new global::System.ArgumentNullException(), data.Notes, MapNonNullableIGetPurchaseOrderById_PurchaseOrderById_ItemsNonNullableArray(data.Items ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderById_PurchaseOrderById_Items> MapNonNullableIGetPurchaseOrderById_PurchaseOrderById_ItemsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.PurchaseOrderItemDtoData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var purchaseOrderItemDtos = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderById_PurchaseOrderById_Items>();
            foreach (global::MyMarketManager.GraphQL.Client.State.PurchaseOrderItemDtoData child in list)
            {
                purchaseOrderItemDtos.Add(MapNonNullableIGetPurchaseOrderById_PurchaseOrderById_Items(child, snapshot));
            }

            return purchaseOrderItemDtos;
        }

        private global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderById_PurchaseOrderById_Items MapNonNullableIGetPurchaseOrderById_PurchaseOrderById_Items(global::MyMarketManager.GraphQL.Client.State.PurchaseOrderItemDtoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPurchaseOrderById_PurchaseOrderById_Items returnValue = default !;
            if (data.__typename.Equals("PurchaseOrderItemDto", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPurchaseOrderById_PurchaseOrderById_Items_PurchaseOrderItemDto(data.Id ?? throw new global::System.ArgumentNullException(), data.ProductId, data.ProductName, data.SupplierReference, data.SupplierProductUrl, data.Name ?? throw new global::System.ArgumentNullException(), data.Description, data.Quantity ?? throw new global::System.ArgumentNullException(), data.ListedUnitPrice ?? throw new global::System.ArgumentNullException(), data.ActualUnitPrice ?? throw new global::System.ArgumentNullException(), data.AllocatedUnitOverhead ?? throw new global::System.ArgumentNullException(), data.TotalUnitCost ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrderByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPurchaseOrderByIdResultInfo(global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDetailDtoData? purchaseOrderById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PurchaseOrderById = purchaseOrderById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDetailDtoData? PurchaseOrderById { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPurchaseOrderByIdResultInfo(PurchaseOrderById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrdersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.GetPurchaseOrdersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPurchaseOrdersResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult);

        public GetPurchaseOrdersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPurchaseOrdersResultInfo info)
            {
                return new GetPurchaseOrdersResult(MapNonNullableIGetPurchaseOrders_PurchaseOrdersNonNullableArray(info.PurchaseOrders, snapshot));
            }

            throw new global::System.ArgumentException("GetPurchaseOrdersResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrders_PurchaseOrders> MapNonNullableIGetPurchaseOrders_PurchaseOrdersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDtoData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var purchaseOrderDtos = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrders_PurchaseOrders>();
            foreach (global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDtoData child in list)
            {
                purchaseOrderDtos.Add(MapNonNullableIGetPurchaseOrders_PurchaseOrders(child, snapshot));
            }

            return purchaseOrderDtos;
        }

        private global::MyMarketManager.GraphQL.Client.IGetPurchaseOrders_PurchaseOrders MapNonNullableIGetPurchaseOrders_PurchaseOrders(global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDtoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPurchaseOrders_PurchaseOrders returnValue = default !;
            if (data.__typename.Equals("PurchaseOrderDto", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPurchaseOrders_PurchaseOrders_PurchaseOrderDto(data.Id ?? throw new global::System.ArgumentNullException(), data.SupplierId ?? throw new global::System.ArgumentNullException(), data.SupplierName ?? throw new global::System.ArgumentNullException(), data.OrderDate ?? throw new global::System.ArgumentNullException(), data.Status ?? throw new global::System.ArgumentNullException(), data.ItemCount ?? throw new global::System.ArgumentNullException(), data.ShippingFees ?? throw new global::System.ArgumentNullException(), data.ImportFees ?? throw new global::System.ArgumentNullException(), data.InsuranceFees ?? throw new global::System.ArgumentNullException(), data.AdditionalFees ?? throw new global::System.ArgumentNullException(), data.Notes);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrdersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPurchaseOrdersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDtoData> purchaseOrders, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PurchaseOrders = purchaseOrders;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDtoData> PurchaseOrders { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPurchaseOrdersResultInfo(PurchaseOrders, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class SubmitCookiesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.SubmitCookiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SubmitCookiesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult);

        public SubmitCookiesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SubmitCookiesResultInfo info)
            {
                return new SubmitCookiesResult(MapNonNullableISubmitCookies_SubmitCookies(info.SubmitCookies, snapshot));
            }

            throw new global::System.ArgumentException("SubmitCookiesResultInfo expected.");
        }

        private global::MyMarketManager.GraphQL.Client.ISubmitCookies_SubmitCookies MapNonNullableISubmitCookies_SubmitCookies(global::MyMarketManager.GraphQL.Client.State.SubmitCookiesPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISubmitCookies_SubmitCookies returnValue = default !;
            if (data.__typename.Equals("SubmitCookiesPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new SubmitCookies_SubmitCookies_SubmitCookiesPayload(data.Success ?? throw new global::System.ArgumentNullException(), data.BatchId, data.Message, data.Error);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class SubmitCookiesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SubmitCookiesResultInfo(global::MyMarketManager.GraphQL.Client.State.SubmitCookiesPayloadData submitCookies, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SubmitCookies = submitCookies;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::MyMarketManager.GraphQL.Client.State.SubmitCookiesPayloadData SubmitCookies { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SubmitCookiesResultInfo(SubmitCookies, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.GetStagingBatchByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetStagingBatchByIdResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult);

        public GetStagingBatchByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetStagingBatchByIdResultInfo info)
            {
                return new GetStagingBatchByIdResult(MapIGetStagingBatchById_StagingBatchById(info.StagingBatchById, snapshot));
            }

            throw new global::System.ArgumentException("GetStagingBatchByIdResultInfo expected.");
        }

        private global::MyMarketManager.GraphQL.Client.IGetStagingBatchById_StagingBatchById? MapIGetStagingBatchById_StagingBatchById(global::MyMarketManager.GraphQL.Client.State.StagingBatchDetailDtoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetStagingBatchById_StagingBatchById returnValue = default !;
            if (data?.__typename.Equals("StagingBatchDetailDto", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetStagingBatchById_StagingBatchById_StagingBatchDetailDto(data.Id ?? throw new global::System.ArgumentNullException(), data.BatchType ?? throw new global::System.ArgumentNullException(), data.BatchProcessorName, data.SupplierId, data.SupplierName, data.StartedAt ?? throw new global::System.ArgumentNullException(), data.CompletedAt, data.Status ?? throw new global::System.ArgumentNullException(), data.Notes, data.ErrorMessage, MapNonNullableIGetStagingBatchById_StagingBatchById_StagingPurchaseOrdersNonNullableArray(data.StagingPurchaseOrders ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders> MapNonNullableIGetStagingBatchById_StagingBatchById_StagingPurchaseOrdersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.StagingPurchaseOrderDtoData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var stagingPurchaseOrderDtos = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders>();
            foreach (global::MyMarketManager.GraphQL.Client.State.StagingPurchaseOrderDtoData child in list)
            {
                stagingPurchaseOrderDtos.Add(MapNonNullableIGetStagingBatchById_StagingBatchById_StagingPurchaseOrders(child, snapshot));
            }

            return stagingPurchaseOrderDtos;
        }

        private global::MyMarketManager.GraphQL.Client.IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders MapNonNullableIGetStagingBatchById_StagingBatchById_StagingPurchaseOrders(global::MyMarketManager.GraphQL.Client.State.StagingPurchaseOrderDtoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetStagingBatchById_StagingBatchById_StagingPurchaseOrders returnValue = default !;
            if (data.__typename.Equals("StagingPurchaseOrderDto", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetStagingBatchById_StagingBatchById_StagingPurchaseOrders_StagingPurchaseOrderDto(data.Id ?? throw new global::System.ArgumentNullException(), data.SupplierReference, data.OrderDate ?? throw new global::System.ArgumentNullException(), data.Status ?? throw new global::System.ArgumentNullException(), data.IsImported ?? throw new global::System.ArgumentNullException(), data.ErrorMessage, data.ItemCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetStagingBatchByIdResultInfo(global::MyMarketManager.GraphQL.Client.State.StagingBatchDetailDtoData? stagingBatchById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            StagingBatchById = stagingBatchById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::MyMarketManager.GraphQL.Client.State.StagingBatchDetailDtoData? StagingBatchById { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetStagingBatchByIdResultInfo(StagingBatchById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.GetStagingBatchesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetStagingBatchesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult);

        public GetStagingBatchesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetStagingBatchesResultInfo info)
            {
                return new GetStagingBatchesResult(MapNonNullableIGetStagingBatches_StagingBatchesNonNullableArray(info.StagingBatches, snapshot));
            }

            throw new global::System.ArgumentException("GetStagingBatchesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetStagingBatches_StagingBatches> MapNonNullableIGetStagingBatches_StagingBatchesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.StagingBatchDtoData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var stagingBatchDtos = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.IGetStagingBatches_StagingBatches>();
            foreach (global::MyMarketManager.GraphQL.Client.State.StagingBatchDtoData child in list)
            {
                stagingBatchDtos.Add(MapNonNullableIGetStagingBatches_StagingBatches(child, snapshot));
            }

            return stagingBatchDtos;
        }

        private global::MyMarketManager.GraphQL.Client.IGetStagingBatches_StagingBatches MapNonNullableIGetStagingBatches_StagingBatches(global::MyMarketManager.GraphQL.Client.State.StagingBatchDtoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetStagingBatches_StagingBatches returnValue = default !;
            if (data.__typename.Equals("StagingBatchDto", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetStagingBatches_StagingBatches_StagingBatchDto(data.Id ?? throw new global::System.ArgumentNullException(), data.BatchType ?? throw new global::System.ArgumentNullException(), data.BatchProcessorName, data.SupplierId, data.SupplierName, data.StartedAt ?? throw new global::System.ArgumentNullException(), data.CompletedAt, data.Status ?? throw new global::System.ArgumentNullException(), data.Notes, data.ErrorMessage, data.OrderCount ?? throw new global::System.ArgumentNullException(), data.ItemCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetStagingBatchesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.StagingBatchDtoData> stagingBatches, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            StagingBatches = stagingBatches;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.StagingBatchDtoData> StagingBatches { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetStagingBatchesResultInfo(StagingBatches, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSuppliersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.GetSuppliersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSuppliersResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyMarketManager.GraphQL.Client.IGetSuppliersResult);

        public GetSuppliersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSuppliersResultInfo info)
            {
                return new GetSuppliersResult(MapNonNullableIGetSuppliers_SuppliersNonNullableArray(info.Suppliers, snapshot));
            }

            throw new global::System.ArgumentException("GetSuppliersResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.IGetSuppliers_Suppliers> MapNonNullableIGetSuppliers_SuppliersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.SupplierOptionData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var supplierOptions = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.IGetSuppliers_Suppliers>();
            foreach (global::MyMarketManager.GraphQL.Client.State.SupplierOptionData child in list)
            {
                supplierOptions.Add(MapNonNullableIGetSuppliers_Suppliers(child, snapshot));
            }

            return supplierOptions;
        }

        private global::MyMarketManager.GraphQL.Client.IGetSuppliers_Suppliers MapNonNullableIGetSuppliers_Suppliers(global::MyMarketManager.GraphQL.Client.State.SupplierOptionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetSuppliers_Suppliers returnValue = default !;
            if (data.__typename.Equals("SupplierOption", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetSuppliers_Suppliers_SupplierOption(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSuppliersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetSuppliersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.SupplierOptionData> suppliers, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Suppliers = suppliers;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.SupplierOptionData> Suppliers { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSuppliersResultInfo(Suppliers, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    internal interface ICreateProductInputInfo
    {
        global::System.Boolean IsSkuSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsDescriptionSet { get; }

        global::System.Boolean IsQualitySet { get; }

        global::System.Boolean IsNotesSet { get; }

        global::System.Boolean IsStockOnHandSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    internal interface IUpdateProductInputInfo
    {
        global::System.Boolean IsSkuSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsDescriptionSet { get; }

        global::System.Boolean IsQualitySet { get; }

        global::System.Boolean IsNotesSet { get; }

        global::System.Boolean IsStockOnHandSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateProductBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.ICreateProductResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProductQuality> _productQualityParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        public CreateProductBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ICreateProductResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _productQualityParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProductQuality>("ProductQuality") ?? throw new global::System.ArgumentException("No serializer for type `ProductQuality` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ICreateProductResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new CreateProductResultInfo(Deserialize_NonNullableICreateProduct_CreateProduct(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createProduct")), entityIds, snapshot.Version);
        }

        private global::MyMarketManager.GraphQL.Client.State.ProductData Deserialize_NonNullableICreateProduct_CreateProduct(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Product", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.ProductData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), sku: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sku")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), description: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), quality: Deserialize_NonNullableProductQuality(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "quality")), notes: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), stockOnHand: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stockOnHand")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::MyMarketManager.GraphQL.Client.ProductQuality Deserialize_NonNullableProductQuality(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _productQualityParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class DeleteProductBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.IDeleteProductResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeleteProductBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IDeleteProductResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IDeleteProductResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new DeleteProductResultInfo(Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteProduct")), entityIds, snapshot.Version);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductByIdBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.IGetProductByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProductQuality> _productQualityParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetProductByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _productQualityParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProductQuality>("ProductQuality") ?? throw new global::System.ArgumentException("No serializer for type `ProductQuality` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductByIdResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetProductByIdResultInfo(Deserialize_IGetProductById_ProductById(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "productById")), entityIds, snapshot.Version);
        }

        private global::MyMarketManager.GraphQL.Client.State.ProductData? Deserialize_IGetProductById_ProductById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Product", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.ProductData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), sku: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sku")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), description: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), quality: Deserialize_NonNullableProductQuality(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "quality")), notes: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), stockOnHand: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stockOnHand")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::MyMarketManager.GraphQL.Client.ProductQuality Deserialize_NonNullableProductQuality(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _productQualityParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetProductsBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.IGetProductsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProductQuality> _productQualityParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetProductsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _productQualityParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProductQuality>("ProductQuality") ?? throw new global::System.ArgumentException("No serializer for type `ProductQuality` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetProductsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetProductsResultInfo(Deserialize_NonNullableIGetProducts_ProductsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "products")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.ProductData> Deserialize_NonNullableIGetProducts_ProductsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var products = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.State.ProductData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                products.Add(Deserialize_NonNullableIGetProducts_Products(child));
            }

            return products;
        }

        private global::MyMarketManager.GraphQL.Client.State.ProductData Deserialize_NonNullableIGetProducts_Products(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Product", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.ProductData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), sku: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sku")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), description: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), quality: Deserialize_NonNullableProductQuality(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "quality")), notes: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), stockOnHand: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stockOnHand")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::MyMarketManager.GraphQL.Client.ProductQuality Deserialize_NonNullableProductQuality(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _productQualityParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UpdateProductBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.IUpdateProductResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProductQuality> _productQualityParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public UpdateProductBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IUpdateProductResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _productQualityParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProductQuality>("ProductQuality") ?? throw new global::System.ArgumentException("No serializer for type `ProductQuality` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IUpdateProductResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new UpdateProductResultInfo(Deserialize_NonNullableIUpdateProduct_UpdateProduct(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateProduct")), entityIds, snapshot.Version);
        }

        private global::MyMarketManager.GraphQL.Client.State.ProductData Deserialize_NonNullableIUpdateProduct_UpdateProduct(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Product", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.ProductData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), sku: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sku")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), description: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), quality: Deserialize_NonNullableProductQuality(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "quality")), notes: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), stockOnHand: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stockOnHand")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::MyMarketManager.GraphQL.Client.ProductQuality Deserialize_NonNullableProductQuality(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _productQualityParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetAvailableScrapersBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.StagingBatchType> _stagingBatchTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetAvailableScrapersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stagingBatchTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.StagingBatchType>("StagingBatchType") ?? throw new global::System.ArgumentException("No serializer for type `StagingBatchType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetAvailableScrapersResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetAvailableScrapersResultInfo(Deserialize_NonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "availableScrapers")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String> Deserialize_NonNullableStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(Deserialize_NonNullableString(child));
            }

            return @strings;
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrderByIdBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProcessingStatus> _processingStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetPurchaseOrderByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _processingStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProcessingStatus>("ProcessingStatus") ?? throw new global::System.ArgumentException("No serializer for type `ProcessingStatus` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrderByIdResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetPurchaseOrderByIdResultInfo(Deserialize_IGetPurchaseOrderById_PurchaseOrderById(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purchaseOrderById")), entityIds, snapshot.Version);
        }

        private global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDetailDtoData? Deserialize_IGetPurchaseOrderById_PurchaseOrderById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PurchaseOrderDetailDto", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDetailDtoData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), supplierId: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierId")), supplierName: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierName")), orderDate: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orderDate")), status: Deserialize_NonNullableProcessingStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), shippingFees: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shippingFees")), importFees: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "importFees")), insuranceFees: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "insuranceFees")), additionalFees: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "additionalFees")), notes: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), items: Deserialize_NonNullableIGetPurchaseOrderById_PurchaseOrderById_ItemsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::MyMarketManager.GraphQL.Client.ProcessingStatus Deserialize_NonNullableProcessingStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _processingStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal Deserialize_NonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.PurchaseOrderItemDtoData> Deserialize_NonNullableIGetPurchaseOrderById_PurchaseOrderById_ItemsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var purchaseOrderItemDtos = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.State.PurchaseOrderItemDtoData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                purchaseOrderItemDtos.Add(Deserialize_NonNullableIGetPurchaseOrderById_PurchaseOrderById_Items(child));
            }

            return purchaseOrderItemDtos;
        }

        private global::MyMarketManager.GraphQL.Client.State.PurchaseOrderItemDtoData Deserialize_NonNullableIGetPurchaseOrderById_PurchaseOrderById_Items(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PurchaseOrderItemDto", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.PurchaseOrderItemDtoData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), productId: Deserialize_Guid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "productId")), productName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "productName")), supplierReference: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierReference")), supplierProductUrl: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierProductUrl")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), description: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), quantity: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "quantity")), listedUnitPrice: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "listedUnitPrice")), actualUnitPrice: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actualUnitPrice")), allocatedUnitOverhead: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allocatedUnitOverhead")), totalUnitCost: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalUnitCost")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid? Deserialize_Guid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetPurchaseOrdersBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProcessingStatus> _processingStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetPurchaseOrdersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _processingStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProcessingStatus>("ProcessingStatus") ?? throw new global::System.ArgumentException("No serializer for type `ProcessingStatus` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetPurchaseOrdersResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetPurchaseOrdersResultInfo(Deserialize_NonNullableIGetPurchaseOrders_PurchaseOrdersNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purchaseOrders")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDtoData> Deserialize_NonNullableIGetPurchaseOrders_PurchaseOrdersNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var purchaseOrderDtos = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDtoData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                purchaseOrderDtos.Add(Deserialize_NonNullableIGetPurchaseOrders_PurchaseOrders(child));
            }

            return purchaseOrderDtos;
        }

        private global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDtoData Deserialize_NonNullableIGetPurchaseOrders_PurchaseOrders(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PurchaseOrderDto", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.PurchaseOrderDtoData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), supplierId: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierId")), supplierName: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierName")), orderDate: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orderDate")), status: Deserialize_NonNullableProcessingStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), itemCount: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "itemCount")), shippingFees: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shippingFees")), importFees: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "importFees")), insuranceFees: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "insuranceFees")), additionalFees: Deserialize_NonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "additionalFees")), notes: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::MyMarketManager.GraphQL.Client.ProcessingStatus Deserialize_NonNullableProcessingStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _processingStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Decimal Deserialize_NonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class SubmitCookiesBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public SubmitCookiesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.ISubmitCookiesResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new SubmitCookiesResultInfo(Deserialize_NonNullableISubmitCookies_SubmitCookies(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submitCookies")), entityIds, snapshot.Version);
        }

        private global::MyMarketManager.GraphQL.Client.State.SubmitCookiesPayloadData Deserialize_NonNullableISubmitCookies_SubmitCookies(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubmitCookiesPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.SubmitCookiesPayloadData(typename, success: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), batchId: Deserialize_Guid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "batchId")), message: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")), error: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "error")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Guid? Deserialize_Guid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchByIdBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.StagingBatchType> _stagingBatchTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProcessingStatus> _processingStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetStagingBatchByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stagingBatchTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.StagingBatchType>("StagingBatchType") ?? throw new global::System.ArgumentException("No serializer for type `StagingBatchType` found.");
            _processingStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProcessingStatus>("ProcessingStatus") ?? throw new global::System.ArgumentException("No serializer for type `ProcessingStatus` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchByIdResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetStagingBatchByIdResultInfo(Deserialize_IGetStagingBatchById_StagingBatchById(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stagingBatchById")), entityIds, snapshot.Version);
        }

        private global::MyMarketManager.GraphQL.Client.State.StagingBatchDetailDtoData? Deserialize_IGetStagingBatchById_StagingBatchById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("StagingBatchDetailDto", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.StagingBatchDetailDtoData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), batchType: Deserialize_NonNullableStagingBatchType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "batchType")), batchProcessorName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "batchProcessorName")), supplierId: Deserialize_Guid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierId")), supplierName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierName")), startedAt: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), completedAt: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), status: Deserialize_NonNullableProcessingStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), notes: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), errorMessage: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessage")), stagingPurchaseOrders: Deserialize_NonNullableIGetStagingBatchById_StagingBatchById_StagingPurchaseOrdersNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stagingPurchaseOrders")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::MyMarketManager.GraphQL.Client.StagingBatchType Deserialize_NonNullableStagingBatchType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stagingBatchTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Guid? Deserialize_Guid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? Deserialize_DateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::MyMarketManager.GraphQL.Client.ProcessingStatus Deserialize_NonNullableProcessingStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _processingStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.StagingPurchaseOrderDtoData> Deserialize_NonNullableIGetStagingBatchById_StagingBatchById_StagingPurchaseOrdersNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var stagingPurchaseOrderDtos = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.State.StagingPurchaseOrderDtoData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                stagingPurchaseOrderDtos.Add(Deserialize_NonNullableIGetStagingBatchById_StagingBatchById_StagingPurchaseOrders(child));
            }

            return stagingPurchaseOrderDtos;
        }

        private global::MyMarketManager.GraphQL.Client.State.StagingPurchaseOrderDtoData Deserialize_NonNullableIGetStagingBatchById_StagingBatchById_StagingPurchaseOrders(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("StagingPurchaseOrderDto", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.StagingPurchaseOrderDtoData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), supplierReference: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierReference")), orderDate: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orderDate")), status: Deserialize_NonNullableProcessingStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), isImported: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isImported")), errorMessage: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessage")), itemCount: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "itemCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetStagingBatchesBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.StagingBatchType> _stagingBatchTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProcessingStatus> _processingStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetStagingBatchesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stagingBatchTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.StagingBatchType>("StagingBatchType") ?? throw new global::System.ArgumentException("No serializer for type `StagingBatchType` found.");
            _processingStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyMarketManager.GraphQL.Client.ProcessingStatus>("ProcessingStatus") ?? throw new global::System.ArgumentException("No serializer for type `ProcessingStatus` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetStagingBatchesResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetStagingBatchesResultInfo(Deserialize_NonNullableIGetStagingBatches_StagingBatchesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stagingBatches")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.StagingBatchDtoData> Deserialize_NonNullableIGetStagingBatches_StagingBatchesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var stagingBatchDtos = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.State.StagingBatchDtoData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                stagingBatchDtos.Add(Deserialize_NonNullableIGetStagingBatches_StagingBatches(child));
            }

            return stagingBatchDtos;
        }

        private global::MyMarketManager.GraphQL.Client.State.StagingBatchDtoData Deserialize_NonNullableIGetStagingBatches_StagingBatches(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("StagingBatchDto", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.StagingBatchDtoData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), batchType: Deserialize_NonNullableStagingBatchType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "batchType")), batchProcessorName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "batchProcessorName")), supplierId: Deserialize_Guid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierId")), supplierName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierName")), startedAt: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), completedAt: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), status: Deserialize_NonNullableProcessingStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), notes: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), errorMessage: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessage")), orderCount: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orderCount")), itemCount: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "itemCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::MyMarketManager.GraphQL.Client.StagingBatchType Deserialize_NonNullableStagingBatchType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stagingBatchTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Guid? Deserialize_Guid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? Deserialize_DateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::MyMarketManager.GraphQL.Client.ProcessingStatus Deserialize_NonNullableProcessingStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _processingStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSuppliersBuilder : global::StrawberryShake.OperationResultBuilder<global::MyMarketManager.GraphQL.Client.IGetSuppliersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetSuppliersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetSuppliersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::MyMarketManager.GraphQL.Client.IGetSuppliersResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetSuppliersResultInfo(Deserialize_NonNullableIGetSuppliers_SuppliersNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "suppliers")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.SupplierOptionData> Deserialize_NonNullableIGetSuppliers_SuppliersNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var supplierOptions = new global::System.Collections.Generic.List<global::MyMarketManager.GraphQL.Client.State.SupplierOptionData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                supplierOptions.Add(Deserialize_NonNullableIGetSuppliers_Suppliers(child));
            }

            return supplierOptions;
        }

        private global::MyMarketManager.GraphQL.Client.State.SupplierOptionData Deserialize_NonNullableIGetSuppliers_Suppliers(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SupplierOption", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyMarketManager.GraphQL.Client.State.SupplierOptionData(typename, id: Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record ProductData
    {
        public ProductData(global::System.String __typename, global::System.Guid? id = default !, global::System.String? sku = default !, global::System.String? name = default !, global::System.String? description = default !, global::MyMarketManager.GraphQL.Client.ProductQuality? quality = default !, global::System.String? notes = default !, global::System.Int32? stockOnHand = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Sku = sku;
            Name = name;
            Description = description;
            Quality = quality;
            Notes = notes;
            StockOnHand = stockOnHand;
        }

        public global::System.String __typename { get; init; }
        public global::System.Guid? Id { get; init; }
        public global::System.String? Sku { get; init; }
        public global::System.String? Name { get; init; }
        public global::System.String? Description { get; init; }
        public global::MyMarketManager.GraphQL.Client.ProductQuality? Quality { get; init; }
        public global::System.String? Notes { get; init; }
        public global::System.Int32? StockOnHand { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record PurchaseOrderDetailDtoData
    {
        public PurchaseOrderDetailDtoData(global::System.String __typename, global::System.Guid? id = default !, global::System.Guid? supplierId = default !, global::System.String? supplierName = default !, global::System.DateTimeOffset? orderDate = default !, global::MyMarketManager.GraphQL.Client.ProcessingStatus? status = default !, global::System.Decimal? shippingFees = default !, global::System.Decimal? importFees = default !, global::System.Decimal? insuranceFees = default !, global::System.Decimal? additionalFees = default !, global::System.String? notes = default !, global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.PurchaseOrderItemDtoData>? items = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            SupplierId = supplierId;
            SupplierName = supplierName;
            OrderDate = orderDate;
            Status = status;
            ShippingFees = shippingFees;
            ImportFees = importFees;
            InsuranceFees = insuranceFees;
            AdditionalFees = additionalFees;
            Notes = notes;
            Items = items;
        }

        public global::System.String __typename { get; init; }
        public global::System.Guid? Id { get; init; }
        public global::System.Guid? SupplierId { get; init; }
        public global::System.String? SupplierName { get; init; }
        public global::System.DateTimeOffset? OrderDate { get; init; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus? Status { get; init; }
        public global::System.Decimal? ShippingFees { get; init; }
        public global::System.Decimal? ImportFees { get; init; }
        public global::System.Decimal? InsuranceFees { get; init; }
        public global::System.Decimal? AdditionalFees { get; init; }
        public global::System.String? Notes { get; init; }
        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.PurchaseOrderItemDtoData>? Items { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record PurchaseOrderItemDtoData
    {
        public PurchaseOrderItemDtoData(global::System.String __typename, global::System.Guid? id = default !, global::System.Guid? productId = default !, global::System.String? productName = default !, global::System.String? supplierReference = default !, global::System.String? supplierProductUrl = default !, global::System.String? name = default !, global::System.String? description = default !, global::System.Int32? quantity = default !, global::System.Decimal? listedUnitPrice = default !, global::System.Decimal? actualUnitPrice = default !, global::System.Decimal? allocatedUnitOverhead = default !, global::System.Decimal? totalUnitCost = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            ProductId = productId;
            ProductName = productName;
            SupplierReference = supplierReference;
            SupplierProductUrl = supplierProductUrl;
            Name = name;
            Description = description;
            Quantity = quantity;
            ListedUnitPrice = listedUnitPrice;
            ActualUnitPrice = actualUnitPrice;
            AllocatedUnitOverhead = allocatedUnitOverhead;
            TotalUnitCost = totalUnitCost;
        }

        public global::System.String __typename { get; init; }
        public global::System.Guid? Id { get; init; }
        public global::System.Guid? ProductId { get; init; }
        public global::System.String? ProductName { get; init; }
        public global::System.String? SupplierReference { get; init; }
        public global::System.String? SupplierProductUrl { get; init; }
        public global::System.String? Name { get; init; }
        public global::System.String? Description { get; init; }
        public global::System.Int32? Quantity { get; init; }
        public global::System.Decimal? ListedUnitPrice { get; init; }
        public global::System.Decimal? ActualUnitPrice { get; init; }
        public global::System.Decimal? AllocatedUnitOverhead { get; init; }
        public global::System.Decimal? TotalUnitCost { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record PurchaseOrderDtoData
    {
        public PurchaseOrderDtoData(global::System.String __typename, global::System.Guid? id = default !, global::System.Guid? supplierId = default !, global::System.String? supplierName = default !, global::System.DateTimeOffset? orderDate = default !, global::MyMarketManager.GraphQL.Client.ProcessingStatus? status = default !, global::System.Int32? itemCount = default !, global::System.Decimal? shippingFees = default !, global::System.Decimal? importFees = default !, global::System.Decimal? insuranceFees = default !, global::System.Decimal? additionalFees = default !, global::System.String? notes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            SupplierId = supplierId;
            SupplierName = supplierName;
            OrderDate = orderDate;
            Status = status;
            ItemCount = itemCount;
            ShippingFees = shippingFees;
            ImportFees = importFees;
            InsuranceFees = insuranceFees;
            AdditionalFees = additionalFees;
            Notes = notes;
        }

        public global::System.String __typename { get; init; }
        public global::System.Guid? Id { get; init; }
        public global::System.Guid? SupplierId { get; init; }
        public global::System.String? SupplierName { get; init; }
        public global::System.DateTimeOffset? OrderDate { get; init; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus? Status { get; init; }
        public global::System.Int32? ItemCount { get; init; }
        public global::System.Decimal? ShippingFees { get; init; }
        public global::System.Decimal? ImportFees { get; init; }
        public global::System.Decimal? InsuranceFees { get; init; }
        public global::System.Decimal? AdditionalFees { get; init; }
        public global::System.String? Notes { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record SubmitCookiesPayloadData
    {
        public SubmitCookiesPayloadData(global::System.String __typename, global::System.Boolean? success = default !, global::System.Guid? batchId = default !, global::System.String? message = default !, global::System.String? error = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Success = success;
            BatchId = batchId;
            Message = message;
            Error = error;
        }

        public global::System.String __typename { get; init; }
        public global::System.Boolean? Success { get; init; }
        public global::System.Guid? BatchId { get; init; }
        public global::System.String? Message { get; init; }
        public global::System.String? Error { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record StagingBatchDetailDtoData
    {
        public StagingBatchDetailDtoData(global::System.String __typename, global::System.Guid? id = default !, global::MyMarketManager.GraphQL.Client.StagingBatchType? batchType = default !, global::System.String? batchProcessorName = default !, global::System.Guid? supplierId = default !, global::System.String? supplierName = default !, global::System.DateTimeOffset? startedAt = default !, global::System.DateTimeOffset? completedAt = default !, global::MyMarketManager.GraphQL.Client.ProcessingStatus? status = default !, global::System.String? notes = default !, global::System.String? errorMessage = default !, global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.StagingPurchaseOrderDtoData>? stagingPurchaseOrders = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            BatchType = batchType;
            BatchProcessorName = batchProcessorName;
            SupplierId = supplierId;
            SupplierName = supplierName;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            Status = status;
            Notes = notes;
            ErrorMessage = errorMessage;
            StagingPurchaseOrders = stagingPurchaseOrders;
        }

        public global::System.String __typename { get; init; }
        public global::System.Guid? Id { get; init; }
        public global::MyMarketManager.GraphQL.Client.StagingBatchType? BatchType { get; init; }
        public global::System.String? BatchProcessorName { get; init; }
        public global::System.Guid? SupplierId { get; init; }
        public global::System.String? SupplierName { get; init; }
        public global::System.DateTimeOffset? StartedAt { get; init; }
        public global::System.DateTimeOffset? CompletedAt { get; init; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus? Status { get; init; }
        public global::System.String? Notes { get; init; }
        public global::System.String? ErrorMessage { get; init; }
        public global::System.Collections.Generic.IReadOnlyList<global::MyMarketManager.GraphQL.Client.State.StagingPurchaseOrderDtoData>? StagingPurchaseOrders { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record StagingPurchaseOrderDtoData
    {
        public StagingPurchaseOrderDtoData(global::System.String __typename, global::System.Guid? id = default !, global::System.String? supplierReference = default !, global::System.DateTimeOffset? orderDate = default !, global::MyMarketManager.GraphQL.Client.ProcessingStatus? status = default !, global::System.Boolean? isImported = default !, global::System.String? errorMessage = default !, global::System.Int32? itemCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            SupplierReference = supplierReference;
            OrderDate = orderDate;
            Status = status;
            IsImported = isImported;
            ErrorMessage = errorMessage;
            ItemCount = itemCount;
        }

        public global::System.String __typename { get; init; }
        public global::System.Guid? Id { get; init; }
        public global::System.String? SupplierReference { get; init; }
        public global::System.DateTimeOffset? OrderDate { get; init; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus? Status { get; init; }
        public global::System.Boolean? IsImported { get; init; }
        public global::System.String? ErrorMessage { get; init; }
        public global::System.Int32? ItemCount { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record StagingBatchDtoData
    {
        public StagingBatchDtoData(global::System.String __typename, global::System.Guid? id = default !, global::MyMarketManager.GraphQL.Client.StagingBatchType? batchType = default !, global::System.String? batchProcessorName = default !, global::System.Guid? supplierId = default !, global::System.String? supplierName = default !, global::System.DateTimeOffset? startedAt = default !, global::System.DateTimeOffset? completedAt = default !, global::MyMarketManager.GraphQL.Client.ProcessingStatus? status = default !, global::System.String? notes = default !, global::System.String? errorMessage = default !, global::System.Int32? orderCount = default !, global::System.Int32? itemCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            BatchType = batchType;
            BatchProcessorName = batchProcessorName;
            SupplierId = supplierId;
            SupplierName = supplierName;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            Status = status;
            Notes = notes;
            ErrorMessage = errorMessage;
            OrderCount = orderCount;
            ItemCount = itemCount;
        }

        public global::System.String __typename { get; init; }
        public global::System.Guid? Id { get; init; }
        public global::MyMarketManager.GraphQL.Client.StagingBatchType? BatchType { get; init; }
        public global::System.String? BatchProcessorName { get; init; }
        public global::System.Guid? SupplierId { get; init; }
        public global::System.String? SupplierName { get; init; }
        public global::System.DateTimeOffset? StartedAt { get; init; }
        public global::System.DateTimeOffset? CompletedAt { get; init; }
        public global::MyMarketManager.GraphQL.Client.ProcessingStatus? Status { get; init; }
        public global::System.String? Notes { get; init; }
        public global::System.String? ErrorMessage { get; init; }
        public global::System.Int32? OrderCount { get; init; }
        public global::System.Int32? ItemCount { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial record SupplierOptionData
    {
        public SupplierOptionData(global::System.String __typename, global::System.Guid? id = default !, global::System.String? name = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Name = name;
        }

        public global::System.String __typename { get; init; }
        public global::System.Guid? Id { get; init; }
        public global::System.String? Name { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class MyMarketManagerClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class MyMarketManagerClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public MyMarketManagerClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
