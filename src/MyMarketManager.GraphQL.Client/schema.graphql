schema {
  query: Query
  mutation: Mutation
}

type Query {
  products: [Product!]!
  productById(id: UUID!): Product
  purchaseOrders: [PurchaseOrderDto!]!
  purchaseOrderById(id: UUID!): PurchaseOrderDetailDto
  availableScrapers(batchType: StagingBatchType!): [String!]!
  stagingBatches: [StagingBatchDto!]!
  stagingBatchById(id: UUID!): StagingBatchDetailDto
  suppliers: [SupplierOption!]!
}

type Mutation {
  createProduct(input: CreateProductInput!): Product!
  updateProduct(id: UUID! input: UpdateProductInput!): Product!
  deleteProduct(id: UUID!): Boolean!
  submitCookies(input: SubmitCookiesInput!): SubmitCookiesPayload!
}

type SupplierOption {
  id: UUID!
  name: String!
}

type StagingBatchDetailDto {
  id: UUID!
  batchType: StagingBatchType!
  batchProcessorName: String
  supplierId: UUID
  supplierName: String
  startedAt: DateTime!
  completedAt: DateTime
  status: ProcessingStatus!
  notes: String
  errorMessage: String
  stagingPurchaseOrders: [StagingPurchaseOrderDto!]!
}

type StagingBatchDto {
  id: UUID!
  batchType: StagingBatchType!
  batchProcessorName: String
  supplierId: UUID
  supplierName: String
  startedAt: DateTime!
  completedAt: DateTime
  status: ProcessingStatus!
  notes: String
  errorMessage: String
  orderCount: Int!
  itemCount: Int!
}

enum StagingBatchType {
  WEB_SCRAPE
  BLOB_UPLOAD
}

type PurchaseOrderDetailDto {
  id: UUID!
  supplierId: UUID!
  supplierName: String!
  orderDate: DateTime!
  status: ProcessingStatus!
  shippingFees: Decimal!
  importFees: Decimal!
  insuranceFees: Decimal!
  additionalFees: Decimal!
  notes: String
  items: [PurchaseOrderItemDto!]!
}

type PurchaseOrderDto {
  id: UUID!
  supplierId: UUID!
  supplierName: String!
  orderDate: DateTime!
  status: ProcessingStatus!
  itemCount: Int!
  shippingFees: Decimal!
  importFees: Decimal!
  insuranceFees: Decimal!
  additionalFees: Decimal!
  notes: String
}

scalar UUID

type Product {
  sku: String
  name: String!
  description: String
  quality: ProductQuality!
  notes: String
  stockOnHand: Int!
  photos: [ProductPhoto!]!
  purchaseOrderItems: [PurchaseOrderItem!]!
  deliveryItems: [DeliveryItem!]!
  reconciledSales: [ReconciledSale!]!
  stagingPurchaseOrderItems: [StagingPurchaseOrderItem!]!
  stagingSaleItems: [StagingSaleItem!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

input CreateProductInput {
  sku: String
  name: String!
  description: String
  quality: ProductQuality!
  notes: String
  stockOnHand: Int!
}

input UpdateProductInput {
  sku: String
  name: String!
  description: String
  quality: ProductQuality!
  notes: String
  stockOnHand: Int!
}

type SubmitCookiesPayload {
  success: Boolean!
  batchId: UUID
  message: String
  error: String
}

input SubmitCookiesInput {
  supplierId: UUID!
  processorName: String!
  cookieJson: String!
}

type StagingSaleItem {
  stagingSaleId: UUID!
  stagingSale: StagingSale!
  productId: UUID
  product: Product
  productDescription: String!
  saleDate: DateTime!
  price: Decimal!
  quantity: Int!
  marketEventName: String
  rawData: String!
  isImported: Boolean!
  status: CandidateStatus!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

type StagingPurchaseOrderItem {
  stagingPurchaseOrderId: UUID!
  stagingPurchaseOrder: StagingPurchaseOrder!
  productId: UUID
  product: Product
  supplierId: UUID
  supplier: Supplier
  purchaseOrderItemId: UUID
  purchaseOrderItem: PurchaseOrderItem
  supplierReference: String
  supplierProductUrl: String
  name: String!
  description: String
  quantity: Int!
  listedUnitPrice: Decimal!
  actualUnitPrice: Decimal!
  rawData: String!
  isImported: Boolean!
  status: CandidateStatus!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

type ReconciledSale {
  productId: UUID!
  product: Product!
  marketEventId: UUID!
  marketEvent: MarketEvent!
  quantity: Int!
  salePrice: Decimal!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

type DeliveryItem {
  deliveryId: UUID!
  delivery: Delivery!
  productId: UUID!
  product: Product!
  quantity: Int!
  quality: ProductQuality!
  notes: String
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

type PurchaseOrderItem {
  purchaseOrderId: UUID!
  purchaseOrder: PurchaseOrder!
  productId: UUID
  product: Product
  supplierReference: String
  supplierProductUrl: String
  name: String!
  description: String
  quantity: Int!
  listedUnitPrice: Decimal!
  actualUnitPrice: Decimal!
  allocatedUnitOverhead: Decimal!
  totalUnitCost: Decimal!
  stagingPurchaseOrderItems: [StagingPurchaseOrderItem!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

type ProductPhoto {
  productId: UUID!
  product: Product!
  url: String!
  caption: String
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

enum ProductQuality {
  UNKNOWN
  TERRIBLE
  POOR
  FAIR
  GOOD
  EXCELLENT
}

type PurchaseOrderItemDto {
  id: UUID!
  productId: UUID
  productName: String
  supplierReference: String
  supplierProductUrl: String
  name: String!
  description: String
  quantity: Int!
  listedUnitPrice: Decimal!
  actualUnitPrice: Decimal!
  allocatedUnitOverhead: Decimal!
  totalUnitCost: Decimal!
}

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal

type StagingPurchaseOrderDto {
  id: UUID!
  supplierReference: String
  orderDate: DateTime!
  status: ProcessingStatus!
  isImported: Boolean!
  errorMessage: String
  itemCount: Int!
}

enum ProcessingStatus {
  QUEUED
  STARTED
  COMPLETED
  FAILED
  CANCELLED
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

type PurchaseOrder {
  supplierId: UUID!
  supplier: Supplier!
  orderDate: DateTime!
  status: ProcessingStatus!
  shippingFees: Decimal!
  importFees: Decimal!
  insuranceFees: Decimal!
  additionalFees: Decimal!
  notes: String
  items: [PurchaseOrderItem!]!
  deliveries: [Delivery!]!
  stagingPurchaseOrders: [StagingPurchaseOrder!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

type Delivery {
  purchaseOrderId: UUID
  purchaseOrder: PurchaseOrder
  deliveryDate: DateTime!
  courier: String
  trackingNumber: String
  status: ProcessingStatus!
  items: [DeliveryItem!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

type MarketEvent {
  name: String!
  date: DateTime!
  location: String
  notes: String
  reconciledSales: [ReconciledSale!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

type Supplier {
  name: String!
  websiteUrl: String
  contactInfo: String
  purchaseOrders: [PurchaseOrder!]!
  stagingBatches: [StagingBatch!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

type StagingPurchaseOrder {
  stagingBatchId: UUID!
  stagingBatch: StagingBatch!
  purchaseOrderId: UUID
  purchaseOrder: PurchaseOrder
  supplierReference: String
  orderDate: DateTime!
  rawData: String!
  isImported: Boolean!
  status: ProcessingStatus!
  errorMessage: String
  items: [StagingPurchaseOrderItem!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

enum CandidateStatus {
  PENDING
  LINKED
  IGNORED
}

type StagingSale {
  stagingBatchId: UUID!
  stagingBatch: StagingBatch!
  saleDate: DateTime!
  rawData: String!
  isImported: Boolean!
  items: [StagingSaleItem!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

type StagingBatch {
  batchType: StagingBatchType!
  batchProcessorName: String
  supplierId: UUID
  supplier: Supplier
  startedAt: DateTime!
  completedAt: DateTime
  fileHash: String!
  status: ProcessingStatus!
  notes: String
  errorMessage: String
  fileContents: String
  stagingPurchaseOrders: [StagingPurchaseOrder!]!
  stagingSales: [StagingSale!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  isDeleted: Boolean!
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION