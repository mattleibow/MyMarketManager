// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMarketManager.Data;

#nullable disable

namespace MyMarketManager.Data.Migrations
{
    [DbContext(typeof(MyMarketManagerDbContext))]
    partial class MyMarketManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyMarketManager.Data.Entities.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Courier")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.DeliveryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quality")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("ProductId");

                    b.ToTable("DeliveryItems");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.MarketEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MarketEvents");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quality")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StockOnHand")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasFilter("[SKU] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhotos");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdditionalFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ImportFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ShippingFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AllocatedUnitOverhead")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("ListedUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SupplierProductUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SupplierReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("TotalUnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.ReconciledSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MarketEventId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MarketEventId");

                    b.HasIndex("ProductId");

                    b.ToTable("ReconciledSales");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("StagingBatches");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingPurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsImported")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StagingBatchId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("StagingBatchId");

                    b.ToTable("StagingPurchaseOrders");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingPurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsImported")
                        .HasColumnType("bit");

                    b.Property<decimal>("ListedUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StagingPurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierProductUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SupplierReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderItemId");

                    b.HasIndex("StagingPurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("StagingPurchaseOrderItems");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsImported")
                        .HasColumnType("bit");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StagingBatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StagingBatchId");

                    b.ToTable("StagingSales");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingSaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsImported")
                        .HasColumnType("bit");

                    b.Property<string>("MarketEventName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StagingSaleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StagingSaleId");

                    b.ToTable("StagingSaleItems");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.Delivery", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Deliveries")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.DeliveryItem", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.Delivery", "Delivery")
                        .WithMany("Items")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMarketManager.Data.Entities.Product", "Product")
                        .WithMany("DeliveryItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.ProductPhoto", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.Product", "Product")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyMarketManager.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.ReconciledSale", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.MarketEvent", "MarketEvent")
                        .WithMany("ReconciledSales")
                        .HasForeignKey("MarketEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMarketManager.Data.Entities.Product", "Product")
                        .WithMany("ReconciledSales")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MarketEvent");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingBatch", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.Supplier", "Supplier")
                        .WithMany("StagingBatches")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingPurchaseOrder", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("StagingPurchaseOrders")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyMarketManager.Data.Entities.StagingBatch", "StagingBatch")
                        .WithMany("StagingPurchaseOrders")
                        .HasForeignKey("StagingBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("StagingBatch");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingPurchaseOrderItem", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.Product", "Product")
                        .WithMany("StagingPurchaseOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyMarketManager.Data.Entities.PurchaseOrderItem", "PurchaseOrderItem")
                        .WithMany("StagingPurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyMarketManager.Data.Entities.StagingPurchaseOrder", "StagingPurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("StagingPurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMarketManager.Data.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrderItem");

                    b.Navigation("StagingPurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingSale", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.StagingBatch", "StagingBatch")
                        .WithMany("StagingSales")
                        .HasForeignKey("StagingBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StagingBatch");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingSaleItem", b =>
                {
                    b.HasOne("MyMarketManager.Data.Entities.Product", "Product")
                        .WithMany("StagingSaleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyMarketManager.Data.Entities.StagingSale", "StagingSale")
                        .WithMany("Items")
                        .HasForeignKey("StagingSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StagingSale");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.Delivery", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.MarketEvent", b =>
                {
                    b.Navigation("ReconciledSales");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.Product", b =>
                {
                    b.Navigation("DeliveryItems");

                    b.Navigation("Photos");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("ReconciledSales");

                    b.Navigation("StagingPurchaseOrderItems");

                    b.Navigation("StagingSaleItems");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Items");

                    b.Navigation("StagingPurchaseOrders");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.PurchaseOrderItem", b =>
                {
                    b.Navigation("StagingPurchaseOrderItems");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingBatch", b =>
                {
                    b.Navigation("StagingPurchaseOrders");

                    b.Navigation("StagingSales");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingPurchaseOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.StagingSale", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MyMarketManager.Data.Entities.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("StagingBatches");
                });
#pragma warning restore 612, 618
        }
    }
}
